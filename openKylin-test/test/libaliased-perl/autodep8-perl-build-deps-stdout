t/00-report-prereqs.t .. 
1..1
# 
# Versions for all modules listed in static metadata (including optional ones):
# 
# === Configure Requires ===
# 
#     Module               Want  Have
#     ------------------- ----- -----
#     Module::Build::Tiny 0.039 0.039
# 
# === Test Requires ===
# 
#     Module              Want     Have
#     ------------------- ---- --------
#     B                    any     1.76
#     ExtUtils::MakeMaker  any     7.34
#     File::Spec           any     3.78
#     Test::More           any 1.302162
#     if                   any   0.0608
#     lib                  any     0.65
# 
# === Test Recommends ===
# 
#     Module         Want     Have
#     ---------- -------- --------
#     CPAN::Meta 2.120900 2.150010
# 
# === Runtime Requires ===
# 
#     Module   Want Have
#     -------- ---- ----
#     Carp      any 1.50
#     Exporter  any 5.73
#     strict    any 1.11
#     warnings  any 1.44
# 
ok 1
ok
t/aliased.t ............ 
ok 1 - require aliased;
ok 2 - ... and exported functions should not (yet) be in our namespace
ok 3 - aliased() should not be exported by default
ok 4 - ... trying to use aliased without a package name should not fail
ok 5 - main->can('alias')
ok 6 - Trying to use aliased with a module it cannot load should fail
ok 7 - ... and it should have an appropriate error message
ok 8 - '... and the object it returns' isa 'Really::Long::Module::Name'
ok 9 - ... and import items should be handled correctly
ok 10 - ... and exhibit the correct behavior
ok 11 - We should be able to alias to different packages, even though that is really stupid
ok 12 - '... and the object returned' isa 'Really::Long::Module::Conflicting::Name'
ok 13 - We should be able to pass an array ref as an import list
ok 14 - ... and it should behave as expected
ok 15 - ... and it should behave as expected
ok 16 - ... and it should behave as expected
ok 17 - '... a short alias works in a package' isa 'Really::Long::Module::Name'
ok 18 - '... a long alias works in a package' isa 'Really::Long::Module::Name'
1..18
ok
t/export.t ............. 
ok 1 - installed symbol was compiled in the aliased package
1..1
ok
t/import.t ............. 
ok 1 - use aliased;
ok 2 - alias() should be imported into our namespace
ok 3 - aliasing to a scalar should succeed
ok 4 - ... and it should return the correct results
ok 5 - ... and it should still allow importing
1..5
ok
t/prefix.t ............. 
ok 1 - prefix() should be in our namespace if we ask for it
ok 2 - alias() should be in our namespace if we ask for it
ok 3 - Calling prefix should succeed
ok 4 - ... returning a code ref
ok 5 - ... and called directly, returns the correct class
ok 6 - ... and if called with a subpackage name, should also return the correct class
1..6
ok
t/sigdie.t ............. 
ok 1 - $SIG{__DIE__} handlers should not be destroyed
ok 2 - ... and should behave as expected
ok 3 - A bad load should not break $SIG{__DIE__} handlers
ok 4 - ... and they should retain their value
ok 5 - Loading code without sigdie handlers should succeed
ok 6 - ... and the sigdie handlers should retain their value
ok 7 - Loading code without sigdie handlers should succeed
ok 8 - New $SIG{__DIE__} handlers should be loaded
ok 9 - ... and should behave as expected
1..9
ok
All tests successful.
Files=6, Tests=40,  6 wallclock secs ( 0.37 usr  0.12 sys +  5.00 cusr  1.30 csys =  6.79 CPU)
Result: PASS
