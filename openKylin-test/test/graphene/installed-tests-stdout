Running test: graphene-1.0/plane.test

  graphene_plane_t
    initializes with a normal and a constant
      ✓ init to set normal field
      ✓ init to set constant field
      ✓ init with null normal defaults to X axis

      3 passing (2.53 ms)
      0 skipped
      0 failing

    initializes with a normal and a point
      ✓ plane normal is set
      ✓ plane constant is set

      2 passing (571.00 µs)
      0 skipped
      0 failing

    normalizes
      ✓ plane normal to be the X axis
      ✓ length of plane normal to be 1
      ✓ plane constant to be 1

      3 passing (437.00 µs)
      0 skipped
      0 failing

    handles positive distances
      ✓ distance(4, 0, 0) to be 3
      ✓ distance(1, 0, 0) to be 0
      ✓ distance(4, 0, 0) to be -3 after negating
      ✓ distance(1, 0, 0) to be 0 after negating

      4 passing (850.00 µs)
      0 skipped
      0 failing

    handles negative distances
      ✓ distance(4, 0, 0) to be 5

      1 passing (206.00 µs)
      0 skipped
      0 failing


Total
13 passing (10.14 ms)
0 skipped
0 failing

PASS: graphene-1.0/plane.test
Running test: graphene-1.0/vec3.test

  graphene_vec3_t
    has constant vectors
      ✓ zero() vec3 to not be null
      ✓ zero() to return the same pointer
      ✓ zero().x to be 0
      ✓ zero().y to be 0
      ✓ zero().z to be 0
      ✓ length(zero()) to be 0
      ✓ one() to not return null
      ✓ one() to return the same pointer
      ✓ one().x to be 1
      ✓ one().y to be 1
      ✓ one().z to be 1
      ✓ x_axis() to not return null
      ✓ x_axis() to return the same pointer
      ✓ x_axis().x to be 1
      ✓ y_axis() to not return null
      ✓ y_axis() to return the same pointer
      ✓ y_axis().y to be 1
      ✓ z_axis() to not return null
      ✓ z_axis() to return the same pointer
      ✓ z_axis().z to be 1

      20 passing (3.83 ms)
      0 skipped
      0 failing

    initializes channels
      ✓ init() to initialize x component
      ✓ init() to initialize y component
      ✓ init() to initialize z component
      ✓ init_from_vec3() to initialize x component
      ✓ init_from_vec3() to initialize y component
      ✓ init_from_vec3() to initialize z component
      ✓ init_from_float() to initialize x component
      ✓ init_from_float() to initialize y component
      ✓ init_from_float() to initialize z component
      ✓ roundtrip between init_from_float() and to_float()

      10 passing (1.65 ms)
      0 skipped
      0 failing

    can add
      ✓ add() to subtract each component

      1 passing (403.00 µs)
      0 skipped
      0 failing

    can subtract
      ✓ sub() to subtract each component

      1 passing (220.00 µs)
      0 skipped
      0 failing

    can multiply
      ✓ mul() to multiply each component

      1 passing (236.00 µs)
      0 skipped
      0 failing

    can divide
      ✓ divide() to divide each component

      1 passing (262.00 µs)
      0 skipped
      0 failing

    can compute the dot product
      ✓ dot() to compute the dot product of all component

      1 passing (194.00 µs)
      0 skipped
      0 failing

    can compute the cross product
      ✓ cross() to compute the cross product of all component

      1 passing (180.00 µs)
      0 skipped
      0 failing

    can scale
      ✓ scale() to scale every component

      1 passing (165.00 µs)
      0 skipped
      0 failing

    can negate
      ✓ negate() to flip the sign on every component

      1 passing (158.00 µs)
      0 skipped
      0 failing

    can compute the length
      ✓ length() to be the square distance on all components

      1 passing (212.00 µs)
      0 skipped
      0 failing

    can normalize
      ✓ normalize() to scale components with the inverse of the length

      1 passing (420.00 µs)
      0 skipped
      0 failing

    can compare
      ✓ min() to return the minimum value in each channel
      ✓ max() to return the maximum value in each channel

      2 passing (606.00 µs)
      0 skipped
      0 failing

    can convert to other vector types
      ✓ get_xy() to use the first two components
      ✓ get_xy0() to use the first two components, and set the third to 0
      ✓ get_xyz0() to use all three components, and set the fourth to 0
      ✓ get_xyz1() to use all three components, and set the fourth to 1
      ✓ get_xyzw() to use all three components, and set the fourth to the w argument

      5 passing (1.71 ms)
      0 skipped
      0 failing

    can check for equality
      ✓ a vector to be equal to itself
      ✓ a vector not to be equal to null
      ✓ null not to be equal to a vector
      ✓ two different vectors to not be equal

      4 passing (559.00 µs)
      0 skipped
      0 failing


Total
51 passing (21.46 ms)
0 skipped
0 failing

PASS: graphene-1.0/vec3.test
Running test: graphene-1.0/ray.test

  graphene_ray_t
    can be initialized
      ✓ initializing origin to null sets it to (0, 0, 0)
      ✓ initializing direction to null uses a zero vector

      2 passing (1.26 ms)
      0 skipped
      0 failing

    can compute the position of a point on the ray
      ✓ querying a distance of 0 to return the origin
      ✓ querying a negative distance to return a point behind the origin
      ✓ querying a positive distance to return a point on the ray

      3 passing (1.02 ms)
      0 skipped
      0 failing

    can compute the closest approach of a point from the ray
      ✓ closest approach from (0, 0, 0) to be sqrt(3)
      ✓ closest approach on the origin of the ray to be zero
      ✓ closest approach from (0, 0, 50) to be sqrt(2)

      3 passing (653.00 µs)
      0 skipped
      0 failing

    can compute the closest point to a point on the ray
      ✓ closest point behind the origin is the origin
      ✓ closest point in front of the ray to be on the ray
      ✓ closest point on the ray to be the same point

      3 passing (441.00 µs)
      0 skipped
      0 failing

    can be transformed
      ✓ transforming a ray with an identity matrix does not change the ray
      ✓ transforming a ray on the Z axis with a rotation on the Z axis does not change the ray

      2 passing (1.19 ms)
      0 skipped
      0 failing

    can intersect triangles
      ✓ no intersection if ray's direction is zero
      ✓ intersection with backside faces
      ✓ intersection without backside faces
      ✓ intersection distance to be valid

      4 passing (755.00 µs)
      0 skipped
      0 failing


Total
17 passing (10.84 ms)
0 skipped
0 failing

PASS: graphene-1.0/ray.test
Running test: graphene-1.0/vec2.test

  graphene_vec2_t
    has constant vectors
      ✓ zero() vec2 to not be null
      ✓ zero() to return the same pointer
      ✓ zero().x to be 0
      ✓ zero().y to be 0
      ✓ length(zero()) to be 0
      ✓ one() to not return null
      ✓ one() to return the same pointer
      ✓ one().x to be 1
      ✓ one().y to be 1
      ✓ x_axis() to not return null
      ✓ x_axis() to return the same pointer
      ✓ x_axis().x to be 1
      ✓ y_axis() to not return null
      ✓ y_axis() to return the same pointer
      ✓ y_axis().y to be 1

      15 passing (2.58 ms)
      0 skipped
      0 failing

    initializes channels
      ✓ init() to initialize x component
      ✓ init() to initialize y component
      ✓ init_from_vec2() to initialize x component
      ✓ init_from_vec2() to initialize y component
      ✓ init_from_float() to initialize x component
      ✓ init_from_float() to initialize y component
      ✓ roundtrip between init_from_float() and to_float()

      7 passing (950.00 µs)
      0 skipped
      0 failing

    can add
      ✓ add() to subtract each component

      1 passing (281.00 µs)
      0 skipped
      0 failing

    can subtract
      ✓ sub() to subtract each component

      1 passing (169.00 µs)
      0 skipped
      0 failing

    can multiply
      ✓ mul() to multiply each component

      1 passing (190.00 µs)
      0 skipped
      0 failing

    can divide
      ✓ divide() to divide each component

      1 passing (193.00 µs)
      0 skipped
      0 failing

    can compute the dot product
      ✓ dot() to compute the dot product of all component

      1 passing (161.00 µs)
      0 skipped
      0 failing

    can scale
      ✓ scale() to scale every component

      1 passing (159.00 µs)
      0 skipped
      0 failing

    can negate
      ✓ negate() to flip the sign on every component

      1 passing (187.00 µs)
      0 skipped
      0 failing

    can compute the length
      ✓ length() to be the square distance on all components

      1 passing (135.00 µs)
      0 skipped
      0 failing

    can normalize
      ✓ normalize() to scale components with the inverse of the length

      1 passing (249.00 µs)
      0 skipped
      0 failing

    can compare
      ✓ min() to return the minimum value in each channel
      ✓ max() to return the maximum value in each channel

      2 passing (315.00 µs)
      0 skipped
      0 failing

    can check for equality
      ✓ a vector to be equal to itself
      ✓ a vector not to be equal to null
      ✓ null not to be equal to a vector
      ✓ two different vectors to not be equal

      4 passing (441.00 µs)
      0 skipped
      0 failing


Total
37 passing (13.85 ms)
0 skipped
0 failing

PASS: graphene-1.0/vec2.test
Running test: graphene-1.0/frustum.test

  graphene_frustum_t
    initializes frustums from planes
      ✓ init to use the given planes

      1 passing (978.00 µs)
      0 skipped
      0 failing

    contains points in an orthographic frustum
      ✓ (0, 0, 0) to be outside the frustum
      ✓ (0, 0, -50) to be inside the frustum
      ✓ (0, 0, -1.001) to be inside the frustum
      ✓ (-1, -1, -1.001) to be inside the frustum
      ✓ (-1.1, -1.1, -1.001) to be outside the frustum
      ✓ (1, 1, -1.001) to be inside the frustum
      ✓ (1.1, 1.1, -1.001) to be outside the frustum
      ✓ (0, 0, -100) to be inside the frustum
      ✓ (-1, -1, -100) to be inside the frustum
      ✓ (-1.1, -1.1, -100) to be outside the frustum
      ✓ (1, 1, -100) to be inside the frustum
      ✓ (1.1, 1.1, -100) to be outside the frustum
      ✓ (0, 0, -101) to be outside the frustum

      13 passing (2.98 ms)
      0 skipped
      0 failing

    contains points in a frustum matrix
      ✓ (0, 0, 0) is to be outside the frustum
      ✓ (0, 0, -50) to be inside the frustum
      ✓ (0, 0, -1.001) to be inside the frustum
      ✓ (-1, -1, -1.001) to be inside the frustum
      ✓ (-1.1, -1.1, -1.001) to be outside the frustum
      ✓ (1, 1, -1.001) to be inside the frustum
      ✓ (1.1, 1.1, -1.001) to be outside the frustum

      7 passing (1.02 ms)
      0 skipped
      0 failing


Total
21 passing (9.14 ms)
0 skipped
0 failing

PASS: graphene-1.0/frustum.test
Running test: graphene-1.0/matrix.test

  graphene_matrix_t
    can set and check identity
      ✓ init_identity() to set an identity matrix
      ✓ init_from_float() with an identity matrix to preserve the identity
      ✓ init_from_vec4() with an identity matrix to preserve the identity
      ✓ m.xx to be 1 on an identity matrix
      ✓ m.yy to be 1 on an identity matrix
      ✓ m.zz to be 1 on an identity matrix
      ✓ m.ww to be 1 on an identity matrix
      ✓ identity matrix to be all zeros except on the diagonal
      ✓ transforming an identity matrix stops it from being an identity

      9 passing (2.47 ms)
      0 skipped
      0 failing

    can check for equality and near equality
      ✓ a matrix to be equal to itself
      ✓ a matrix not to be equal to NULL
      ✓ NULL not to be equal to a matrix
      ✓ two identity matrices to be equal (fast version)
      ✓ two identity matrices to be equal (full version)
      ✓ scale(0.001) not to be equal to scale(0.002)
      ✓ scale(0.001) to be within 0.01 of scale(0.002)

      7 passing (1.00 ms)
      0 skipped
      0 failing

    can scale
      ✓ scaling an identity and initializing a scale to result in the same matrix
      ✓ scale factor on the X axis to be the same
      ✓ scale factor on the Y axis to be the same
      ✓ scale factor on the Z axis to be the same

      4 passing (685.00 µs)
      0 skipped
      0 failing

    can rotate using an axis and an angle
      ✓ rotating an identity and initializing a rotation to result in the same matrix
      ✓ rotations to be cumulative

      2 passing (1.25 ms)
      0 skipped
      0 failing

    can rotate using eulers and quaternions
      ✓ rotating with an euler angle to be equal to angle/axis
      ✓ rotating with a quaternion to be equal to angle/axis

      2 passing (1.03 ms)
      0 skipped
      0 failing

    can translate
      ✓ translating an identity and initializing a translation to result in the same matrix

      1 passing (619.00 µs)
      0 skipped
      0 failing

    has a neutral element
      ✓ scale factors of 1 to be neutral
      ✓ rotation angle of 0 to be neutral
      ✓ translation by the null vector to be neutral

      3 passing (425.00 µs)
      0 skipped
      0 failing

    implements look_at
      ✓ eye: (0, 0, 0), center: (0, 0, -1), up: (0, 1, 0) to be an identity
      ✓ eye: (0, 0, 1), center: (0, 0, 0), up: (0, 1, 0) to be a translation
      ✓ eye: (0, 0, 0), center: (1, 0, -1), up: (0, 1, 0) to be a rotation
      ✓ eye: (0, 0, 0), center: (0, 1, -1), up: (0, 1, 0) to be a rotation

      4 passing (781.00 µs)
      0 skipped
      0 failing

    can invert
      ✓ inverting an identity to return an identity
      ✓ inverting a scale to return an identity
      ✓ inverting a rotation to return an identity
      ✓ inverting a translation to return an identity

      4 passing (1.10 ms)
      0 skipped
      0 failing

    can interpolate
      ✓ translate(100, 100, 100) is not a 2D transform
      ✓ lerp(identity, translate(100, 100, 100), 0.0) = identity
      ✓ lerp(identity, translate(100, 100, 100), 1.0) = translate(100, 100, 100)
      ✓ lerp(identity, translate(100, 100, 100), 0.5) = translate(50, 50, 50)

      4 passing (2.21 ms)
      0 skipped
      0 failing

    can interpolate a perspective transformation
      ✓ lerp(perspective(200), perspective(800), 0.0) = perspective(200)
      ✓ lerp(perspective(200), perspective(800), 1.0) = perspective(800)
      ✓ lerp(perspective(200), perspective(800), 0.5) = perspective(400)

      3 passing (959.00 µs)
      0 skipped
      0 failing

    can multiply itself
      ✓ using the first operand as the result to be valid
      ✓ using the second operand as the result to be valid
      ✓ using the same operands as the result to be valid

      3 passing (496.00 µs)
      0 skipped
      0 failing

    can be converted to an affine matrix
      ✓ 2D matrices only change specific fields

      1 passing (616.00 µs)
      0 skipped
      0 failing

    can set and check 2D identity
      ✓ a 2D identity matrix to be a 2D matrix
      ✓ a 2D identity matrix to be an identity matrix
      ✓ A matrix initialized by init_from_2d() to be a 2D matrix
      ✓ Not all 2D matrices to be identity matrices

      4 passing (1.21 ms)
      0 skipped
      0 failing

    supports 2D transformations
      ✓ scale(2, 2) translate(0.5, 0.5) to be a 2D transformation
      ✓ scale(2, 2) translate(0.5, 0.5) to be [ 2 0 | 0 2 | .5 .5 ]
      ✓ xx to be scale.x
      ✓ yy to be scale.y
      ✓ x0 to be translate.x
      ✓ y0 to be translate.y
      ✓ translate(50, 50), rotate(45deg), translate(-50,-50) to be a 2D transformation
      ✓ perspective(500), rotateY(50deg) to not be a 2D transformation

      8 passing (3.46 ms)
      0 skipped
      0 failing

    supports round-trips with affine matrices
      ✓ roundtrip between init_from_2d and to_2d to result in the same matrix

      1 passing (210.00 µs)
      0 skipped
      0 failing

    can interpolate 2D transformations
      ✓ translating on the X and Y axis is a 2D transform
      ✓ lerp(identity, translate(100, 100), 0.0) = identity
      ✓ lerp(identity, translate(100, 100), 1.0) = translate(100, 100)
      ✓ lerp(identity, translate(100, 100), 0.5) = translate(50, 50)

      4 passing (2.08 ms)
      0 skipped
      0 failing

    can transform 2D bounds
      ✓ identity to not transform the bounds
      ✓ translate(100, 100, 0) to transform the origin of the bounds
      ✓ translate(100, 100, 0) to not transform the size of the bounds

      3 passing (1.35 ms)
      0 skipped
      0 failing

    can transform 3D points
      ✓ mat(translation) × point(zero) = point(translation)
      ✓ mat(translation) × point3d(zero) = point3d(translation)
      ✓ mat(translation) × vec3(zero) = vec3(zero)

      3 passing (678.00 µs)
      0 skipped
      0 failing


Total
70 passing (34.77 ms)
0 skipped
0 failing

PASS: graphene-1.0/matrix.test
Running test: graphene-1.0/triangle.test

  graphene_triangle_t
    initializes from points
      ✓ triangle.a to match first point
      ✓ triangle.b to match second point
      ✓ triangle.c to match third point
      ✓ a unit triangle to have an area of 2
      ✓ triangle.a to be 0 when initialized to NULL
      ✓ triangle.b to be 0 when initialized to NULL
      ✓ triangle.c to be 0 when initialized to NULL
      ✓ degenerate triangle to have an area of zero

      8 passing (2.05 ms)
      0 skipped
      0 failing

    initializes from vectors
      ✓ triangle.a to match first vector
      ✓ triangle.b to match second vector
      ✓ triangle.c to match third vector
      ✓ a unit triangle to have an area of 2
      ✓ triangle.a to be 0 when initialized to NULL
      ✓ triangle.b to be 0 when initialized to NULL
      ✓ triangle.c to be 0 when initialized to NULL
      ✓ degenerate triangle to have an area of zero

      8 passing (1.34 ms)
      0 skipped
      0 failing

    initialized from float arrays
      ✓ triangle.a to match first vector
      ✓ triangle.b to match second vector
      ✓ triangle.c to match third vector
      ✓ a unit triangle to have an area of 2

      4 passing (638.00 µs)
      0 skipped
      0 failing

    contains points
      ✓ triangle contains (0, 0, 0)
      ✓ triangle does not contain (1, 1, 1)
      ✓ triangle contains its midpoint

      3 passing (594.00 µs)
      0 skipped
      0 failing

    defines planes
      ✓ degenerate triangle point A sits on the triangle's plane
      ✓ degenerate triangle point B sits on the triangle's plane
      ✓ degenerate triangle point C sits on the triangle's plane
      ✓ degenerate triangle normal is zero vector
      ✓ degenerate triangle normal is equal to the plane normal
      ✓ unit triangle point A sits on the triangle's plane
      ✓ unit triangle point B sits on the triangle's plane
      ✓ unit triangle point C sits on the triangle's plane
      ✓ unit triangle normal is equal to the plane normal
      ✓ triangle point A sits on the triangle's plane
      ✓ triangle point B sits on the triangle's plane
      ✓ triangle point C sits on the triangle's plane
      ✓ triangle normal is equal to the plane normal

      13 passing (1.96 ms)
      0 skipped
      0 failing

    defines barycoords
      ✓ barycoords for unit triangle point A to exist
      ✓ barycoords for unit triangle point A to be (0, 0)
      ✓ barycoords for unit triangle point B to exist
      ✓ barycoords for unit triangle point B to be (0, 1)
      ✓ barycoords for unit triangle point C to exist
      ✓ barycoords for unit triangle point C to be (1, 0)
      ✓ barycoords for inside point (0.5, 0, 0) to exists
      ✓ barycoords for inside point (0.5, 0, 0) to be (0, 0.5)
      ✓ barycoords for inside point (0.5, 0.5, 0) to exists
      ✓ barycoords for inside point (0.5, 0.5, 0) to be (0.5, 0)
      ✓ barycoords for inside point (1, 0.5, 0) to exists
      ✓ barycoords for inside point (1, 0.5, 0) to be (0.5, 0.5)
      ✓ barycoords for outside point (2, 1, 0) to exists
      ✓ barycoords for outside point (2, 1, 0) to be (1, 1)
      ✓ barycoords for outside point (-1, 0, 0) to exists
      ✓ barycoords for outside point (-1, 0, 0) to be (0, -1)
      ✓ barycoords for point outside triangle plane to exist
      ✓ barycoords for point outside triangle plane to be (0, 0)

      18 passing (2.49 ms)
      0 skipped
      0 failing

    defines areas
      ✓ area of unit triangle constructed counterclockwise to be 0.5
      ✓ area of unit triangle constructed clockwise to be 0.5

      2 passing (266.00 µs)
      0 skipped
      0 failing


Total
56 passing (14.85 ms)
0 skipped
0 failing

PASS: graphene-1.0/triangle.test
Running test: graphene-1.0/quaternion.test

  graphene_quaternion_t
    initialize
      ✓ identity to set (0, 0, 0, 1)
      ✓ initialization sets all fields
      ✓ initialization from quaternion makes a copy

      3 passing (837.00 µs)
      0 skipped
      0 failing

    invert
      ✓ inverting identity gives back an identity
      ✓ inverting a quaternion flips the sign of the first three fields

      2 passing (327.00 µs)
      0 skipped
      0 failing

    dot
      ✓ dot(q, inv(q)) with q = (1, 1, 1, 1) to be -2

      1 passing (332.00 µs)
      0 skipped
      0 failing

    equal
      ✓ a quaternion to be equal to itself
      ✓ a quaternion not to be equal to null
      ✓ null not to be equal to a quaternion
      ✓ two different quaternions not to be equal
      ✓ a quaternion to be equal to its invert

      5 passing (563.00 µs)
      0 skipped
      0 failing

    normalize
      ✓ normalizing a quaternion is the same as normalizing the equivalent vec4

      1 passing (516.00 µs)
      0 skipped
      0 failing

    converts to and from angles
      ✓ roundtrip between init_from_angles and to_angles to yield the same yaw
      ✓ roundtrip between init_from_angles and to_angles to yield the same pitch
      ✓ roundtrip between init_from_angles and to_angles to yield the same roll

      3 passing (1.46 ms)
      0 skipped
      0 failing

    converts to and from vec4
      ✓ roundtrip between init_from_vec4 and to_vec4 to yield the same vector

      1 passing (160.00 µs)
      0 skipped
      0 failing

    converts to and from matrix
      ✓ initializing from an identity matrix yields an identity quaternion
      ✓ initializing from a rotation matrix does not yield an identity quaternion
      ✓ rotating a matrix with a quaternion yields the same quaternion

      3 passing (2.44 ms)
      0 skipped
      0 failing

    converts to and from angle/axis
      ✓ roundtrip init_from_angle_vec3 and to_angle_vec3 yields the same angle
      ✓ roundtrip init_from_angle_vec3 and to_angle_vec3 yields the same axis

      2 passing (560.00 µs)
      0 skipped
      0 failing

    slerp
      ✓ initial and final states are different
      ✓ interpolated result is different from the initial state
      ✓ interpolated result is different from the final state

      3 passing (506.00 µs)
      0 skipped
      0 failing


Total
24 passing (14.45 ms)
0 skipped
0 failing

PASS: graphene-1.0/quaternion.test
Running test: graphene-1.0/quad.test

  graphene_quad_t
    has bounds
      ✓ converting rect corners into a quad yields the same bounds
      ✓ converting a rect into a quad yields the same bounds
      ✓ point[0] to be top left
      ✓ point[1] to be top right
      ✓ point[2] to be bottom right
      ✓ point[3] to be bottom left

      6 passing (3.15 ms)
      0 skipped
      0 failing

    can contain points
      ✓ quad to contain p[0]
      ✓ quad to contain p[1]
      ✓ quad to contain p[2]
      ✓ quad to contain p[3]
      ✓ quad to contain (0.5, 0.5)
      ✓ quad to not contain (10, 10)

      6 passing (821.00 µs)
      0 skipped
      0 failing


Total
12 passing (8.47 ms)
0 skipped
0 failing

PASS: graphene-1.0/quad.test
Running test: graphene-1.0/point.test

  graphene_point_t
    allocates and initializes data
      ✓ allocation to not fail
      ✓ init_from_point to copy the source
      ✓ init to set the X coordinate
      ✓ init to set the Y coordinate
      ✓ init from vec2 to set the X coordinate
      ✓ init from vec2 to set the Y coordinate

      6 passing (1.51 ms)
      0 skipped
      0 failing

    provides a zero point
      ✓ graphene_point_zero() to not return null
      ✓ graphene_point_zero() to return the same pointer
      ✓ graphene_point_zero() to return (0, 0)

      3 passing (421.00 µs)
      0 skipped
      0 failing

    has exact equality
      ✓ a point to be equal to itself
      ✓ a point to not be equal to null
      ✓ null to not be equal to a point
      ✓ two points initialized to the same coordinates to be equal
      ✓ two points initialized to different coordinates not to be equal

      5 passing (697.00 µs)
      0 skipped
      0 failing

    has near equality
      ✓ a point to be near itself
      ✓ (0.1, 0.1) to be within 0.2 units from (0, 0)
      ✓ (0.1, 0.1) to not be within 0.001 from (0, 0)

      3 passing (365.00 µs)
      0 skipped
      0 failing

    computes distances
      ✓ the distance of a point from itself to be zero
      ✓ the distance between (0, 0) and (1, 1) to be sqrt(2)
      ✓ the distance between (0, 0) and (1, 1) to be 1 on the X axis
      ✓ the distance between (0, 0) and (1, 1) to be 1 on the Y axis

      4 passing (633.00 µs)
      0 skipped
      0 failing

    interpolates between values
      ✓ lerp(0, 1, 0.0) = 0
      ✓ lerp(0, 1, 0.5) = 0.5
      ✓ lerp(0, 1, 1.0) = 1

      3 passing (355.00 µs)
      0 skipped
      0 failing


Total
24 passing (9.16 ms)
0 skipped
0 failing

PASS: graphene-1.0/point.test
Running test: graphene-1.0/simd.test

  graphene_simd4f_t
    can copy 4 components
      ✓ dup_4f() to work with an array
      ✓ dup_4f() to work with a structure

      2 passing (1.17 ms)
      0 skipped
      0 failing

    can copy 3 components
      ✓ dup_3f() to work with an array
      ✓ dup_3f() to work with a structure

      2 passing (521.00 µs)
      0 skipped
      0 failing

    can copy 2 components
      ✓ dup_2f() to work with an array
      ✓ dup_2f() to work with a structure

      2 passing (545.00 µs)
      0 skipped
      0 failing

    can compare for equality
      ✓ to be equal to itself
      ✓ two vectors with the same values to be equal
      ✓ two different vectors to be different
      ✓ two different vectors to not be equal

      4 passing (1.11 ms)
      0 skipped
      0 failing

    has less than ordering
      ✓ a < b to be true if all components satisfy the order relation
      ✓ a < b to be false if any component does not satify the order relation

      2 passing (665.00 µs)
      0 skipped
      0 failing

    has less than or equal ordering
      ✓ a ≤ b to be true if all components satisfy the order relation
      ✓ a ≤ b to be false if any component does not satify the order relation

      2 passing (423.00 µs)
      0 skipped
      0 failing

    has greater than or equal ordering
      ✓ a ≤ b to be true if all components satisfy the order relation
      ✓ a ≤ b to be false if any component does not satify the order relation

      2 passing (435.00 µs)
      0 skipped
      0 failing

    has greater than ordering
      ✓ a ≤ b to be true if all components satisfy the order relation
      ✓ a ≤ b to be false if any component does not satify the order relation

      2 passing (361.00 µs)
      0 skipped
      0 failing

    can compute the dot product
      ✓ dot2() to compute the dot product of the first 2 components
      ✓ dot3() to compute the dot product of the first 3 components
      ✓ dot4() to compute the dot product of all four components

      3 passing (901.00 µs)
      0 skipped
      0 failing

    can compute the minimum vector and scalar
      ✓ min() to return the minimum of each component
      ✓ min_val() to put the minimum value in the X component

      2 passing (347.00 µs)
      0 skipped
      0 failing

    can compute the maximum vector and scalar
      ✓ max() to return the maximum of each component
      ✓ max_val() to put the maximum value in the X component

      2 passing (326.00 µs)
      0 skipped
      0 failing


Total
25 passing (18.34 ms)
0 skipped
0 failing

PASS: graphene-1.0/simd.test
Running test: graphene-1.0/sphere.test

  graphene_sphere_t
    initialize
      ✓ alloc to not return null
      ✓ unit sphere not to be empty
      ✓ init to set the center
      ✓ init to set the radius
      ✓ null center to be the origin

      5 passing (1.36 ms)
      0 skipped
      0 failing

    contains point
      ✓ unit sphere to contain origin
      ✓ unit sphere to contain x=1
      ✓ unit sphere to contain y=-1
      ✓ unit sphere to contain z=1
      ✓ unit sphere to not contain (1, 1, 1)

      5 passing (801.00 µs)
      0 skipped
      0 failing

    bounding box
      ✓ bounding box for a unit sphere centered in (1, 1, 1) is (0, 2)
      ✓ bounding box for degenerate sphere is degenerate box

      2 passing (762.00 µs)
      0 skipped
      0 failing

    distance
      ✓ distance of unit sphere from (0, 0, 0) is 0.7320
      ✓ distance of unit sphere from (1, 1, 1) is -1

      2 passing (282.00 µs)
      0 skipped
      0 failing

    translate
      ✓ translating a unit sphere from (1, 1, 1) by -1 puts it at (0, 0, 0)

      1 passing (194.00 µs)
      0 skipped
      0 failing

    empty
      ✓ sphere with a radius of zero is empty
      ✓ unit sphere is not empty

      2 passing (254.00 µs)
      0 skipped
      0 failing


Total
17 passing (9.69 ms)
0 skipped
0 failing

PASS: graphene-1.0/sphere.test
Running test: graphene-1.0/euler.test

  graphene_euler_t
    initializes all components
      ✓ graphene_euler_init() sets the x component
      ✓ graphene_euler_init() sets the y component
      ✓ graphene_euler_init() sets the z component
      ✓ graphene_euler_to_vec3() returns a zero vector

      4 passing (1.36 ms)
      0 skipped
      0 failing

    roundtrips between euler angles and quaternions
      ✓ quaternion → euler → quaternion
      ✓ quaternion → euler → quaternion
      ✓ quaternion → euler → quaternion

      3 passing (2.04 ms)
      0 skipped
      0 failing

    roundtrips between euler angles and matrices
      ✓ matrix → euler → matrix
      ✓ matrix → euler → matrix
      ✓ matrix → euler → matrix

      3 passing (878.00 µs)
      0 skipped
      0 failing


Total
10 passing (8.29 ms)
0 skipped
0 failing

PASS: graphene-1.0/euler.test
Running test: graphene-1.0/size.test

  graphene_size_t
    initializes components
      ✓ graphene_size_init() does not return null
      ✓ graphene_size_init() sets the width
      ✓ graphene_size_init() sets the height

      3 passing (1.55 ms)
      0 skipped
      0 failing

    has a valid zero size constant
      ✓ graphene_size_zero() to not be null
      ✓ graphene_size_zero().width is zero
      ✓ graphene_size_zero().height is zero
      ✓ graphene_size_zero() to return the same pointer
      ✓ graphene_size_zero() to return its own pointer
      ✓ graphene_size_zero() to match a zero size

      6 passing (1.56 ms)
      0 skipped
      0 failing

    checks for null pointers in equal()
      ✓ graphene_size_equal() works on the same pointer
      ✓ graphene_size_equal() works when b is null
      ✓ graphene_size_equal() works when a is null

      3 passing (659.00 µs)
      0 skipped
      0 failing

    scales the size components
      ✓ graphene_size_scale() changes the width
      ✓ graphene_size_scale() changes the height

      2 passing (593.00 µs)
      0 skipped
      0 failing

    interpolates size components
      ✓ lerp(a, b, 0.0) = a
      ✓ lerp(a, b, 0.5) = half
      ✓ lerp(a, b, 1.0) = b

      3 passing (705.00 µs)
      0 skipped
      0 failing


Total
17 passing (12.52 ms)
0 skipped
0 failing

PASS: graphene-1.0/size.test
Running test: graphene-1.0/vec4.test

  graphene_vec4_t
    has constant vectors
      ✓ zero() vec4 to not be null
      ✓ zero() to return the same pointer
      ✓ zero().x to be 0
      ✓ zero().y to be 0
      ✓ zero().z to be 0
      ✓ zero().w to be 0
      ✓ length(zero()) to be 0
      ✓ one() to not return null
      ✓ one() to return the same pointer
      ✓ one().x to be 1
      ✓ one().y to be 1
      ✓ one().z to be 1
      ✓ one().w to be 1
      ✓ x_axis() to not return null
      ✓ x_axis() to return the same pointer
      ✓ x_axis().x to be 1
      ✓ y_axis() to not return null
      ✓ y_axis() to return the same pointer
      ✓ y_axis().y to be 1
      ✓ z_axis() to not return null
      ✓ z_axis() to return the same pointer
      ✓ z_axis().z to be 1
      ✓ w_axis() to not return null
      ✓ w_axis() to return the same pointer
      ✓ w_axis().w to be 1

      25 passing (3.48 ms)
      0 skipped
      0 failing

    initializes channels
      ✓ init() to initialize x component
      ✓ init() to initialize y component
      ✓ init() to initialize z component
      ✓ init() to initialize w component
      ✓ init_from_vec4() to initialize x component
      ✓ init_from_vec4() to initialize y component
      ✓ init_from_vec4() to initialize z component
      ✓ init_from_vec4() to initialize w component
      ✓ init_from_vec3() to initialize x component
      ✓ init_from_vec3() to initialize y component
      ✓ init_from_vec3() to initialize z component
      ✓ init_from_vec3() to initialize w component
      ✓ init_from_vec2() to initialize x component
      ✓ init_from_vec2() to initialize y component
      ✓ init_from_vec2() to initialize z component
      ✓ init_from_vec4() to initialize w component
      ✓ init_from_float() to initialize x component
      ✓ init_from_float() to initialize y component
      ✓ init_from_float() to initialize z component
      ✓ init_from_float() to initialize w component
      ✓ roundtrip between init_from_float() and to_float()

      21 passing (2.59 ms)
      0 skipped
      0 failing

    can add
      ✓ add() to subtract each component

      1 passing (274.00 µs)
      0 skipped
      0 failing

    can subtract
      ✓ sub() to subtract each component

      1 passing (197.00 µs)
      0 skipped
      0 failing

    can multiply
      ✓ mul() to multiply each component

      1 passing (222.00 µs)
      0 skipped
      0 failing

    can divide
      ✓ divide() to divide each component

      1 passing (202.00 µs)
      0 skipped
      0 failing

    can compute the dot product
      ✓ dot() to compute the dot product of all component

      1 passing (193.00 µs)
      0 skipped
      0 failing

    can scale
      ✓ scale() to scale every component

      1 passing (170.00 µs)
      0 skipped
      0 failing

    can negate
      ✓ negate() to flip the sign on every component

      1 passing (160.00 µs)
      0 skipped
      0 failing

    can compute the length
      ✓ length() to be the square distance on all components

      1 passing (133.00 µs)
      0 skipped
      0 failing

    can normalize
      ✓ normalize() to scale components with the inverse of the length

      1 passing (264.00 µs)
      0 skipped
      0 failing

    can compare
      ✓ min() to return the minimum value in each channel
      ✓ max() to return the maximum value in each channel

      2 passing (310.00 µs)
      0 skipped
      0 failing

    can convert to other vector types
      ✓ get_xy() to return the first two channels of a vec4
      ✓ get_xyz() to return the first three channels of a vec4

      2 passing (383.00 µs)
      0 skipped
      0 failing

    can check for equality
      ✓ a vector to be equal to itself
      ✓ a vector not to be equal to null
      ✓ null not to be equal to a vector
      ✓ two different vectors to not be equal

      4 passing (463.00 µs)
      0 skipped
      0 failing


Total
63 passing (17.32 ms)
0 skipped
0 failing

PASS: graphene-1.0/vec4.test
Running test: graphene-1.0/box.test

  graphene_box_t
    initializes min/max points
      ✓ init() does not return null
      ✓ get_min() to be zero
      ✓ get_max() to be one
      ✓ init(null, null) to be zero-sized
      ✓ init_from_vec3(zero, one).min() maps to point3d(zero)
      ✓ init_from_vec3(zero, one).max() maps to point3d(one)
      ✓ init_from_vec3(null, null) is equal to box(zero)

      7 passing (2.18 ms)
      0 skipped
      0 failing

    initializes from points
      ✓ init_from_points() does not return null
      ✓ init_from_points().min() is (0, 0, 0)
      ✓ init_from_points().max() is (2, 2, 2)
      ✓ init_from_points() with one point sets min() to the same point
      ✓ init_from_points() with one point sets max() to the same point
      ✓ init_from_points() with no points is an empty box

      6 passing (1.04 ms)
      0 skipped
      0 failing

    initializes from vectors
      ✓ init_from_vectors().min() is (0, 0, 0)
      ✓ init_from_vectors().max() is (2, 2, 2)
      ✓ init_from_vectors() with one point sets min() to the same point
      ✓ init_from_vectors() with one point sets max() to the same point
      ✓ init_from_vectors() with no points is an empty box

      5 passing (704.00 µs)
      0 skipped
      0 failing

    has the correct sizes
      ✓ box(zero) to have a size of zero
      ✓ box(zero) to have a width of zero
      ✓ box(1) to have a width of 1
      ✓ box(1, -1) to have a depth of 2

      4 passing (688.00 µs)
      0 skipped
      0 failing

    has the correct center point
      ✓ box(zero).center() to be in (0, 0, 0)
      ✓ box(1).center() to be in (0.5, 0.5, 0.5)
      ✓ box(1, -1).center() to be in (0, 0, 0)
      ✓ box(-1).center() to be in (-0.5, -0.5, -0.5)
      ✓ box(empty).center() to be in (0, 0, 0)

      5 passing (815.00 µs)
      0 skipped
      0 failing

    has equality
      ✓ equal(null, null) to be true
      ✓ equal(null, box) to be false
      ✓ equal(box, null) to be false
      ✓ equal(box, box) to be true

      4 passing (453.00 µs)
      0 skipped
      0 failing

    computes unions
      ✓ union(zero, zero) to be equal to zero
      ✓ union(zero, one) to be equal to one
      ✓ union(-1, 1) to be equal to (-1, 1)

      3 passing (401.00 µs)
      0 skipped
      0 failing

    computes intersections
      ✓ intersection(empty, zero) to be empty
      ✓ intersection((-1, 1), (1, 1)) to be (1, 1)
      ✓ intersection(inf, (1, 1)) to be (1, 1)

      3 passing (457.00 µs)
      0 skipped
      0 failing

    expands by point
      ✓ initial size to be zero
      ✓ expand(zero) does not expand
      ✓ expand(1) expands to 1
      ✓ expand(-1) expands to 2

      4 passing (544.00 µs)
      0 skipped
      0 failing

    expands by vector
      ✓ initial size to be zero
      ✓ expand(zero) does not expand
      ✓ expand(1) expands to 1
      ✓ expand(-1) expands to 2

      4 passing (629.00 µs)
      0 skipped
      0 failing

    expands by scalar
      ✓ initial size to be zero
      ✓ expand(zero) does not expand
      ✓ expand(1) expands to 2

      3 passing (456.00 µs)
      0 skipped
      0 failing

    contains point
      ✓ box to contain its center
      ✓ box to contain its vertices [0]
      ✓ box to contain its vertices [1]
      ✓ box to contain its vertices [2]
      ✓ box to contain its vertices [3]
      ✓ box to contain its vertices [4]
      ✓ box to contain its vertices [5]
      ✓ box to contain its vertices [6]
      ✓ box to contain its vertices [7]
      ✓ box to not contain a point outside its volume

      10 passing (1.24 ms)
      0 skipped
      0 failing

    contains box
      ✓ box(1) to not contain box(-1)
      ✓ box(-1, 1) to contain box(1)
      ✓ infinite box to contain any box
      ✓ empty box to not contain any box

      4 passing (1.15 ms)
      0 skipped
      0 failing


Total
62 passing (18.90 ms)
0 skipped
0 failing

PASS: graphene-1.0/box.test
Running test: graphene-1.0/rect.test

  graphene_rect_t
    initializes origin and size
      ✓ init to initialize the origin
      ✓ init to initialize the size
      ✓ initializing from a rectangle creates an equivalent rectangle
      ✓ GRAPHENE_RECT_INIT_ZERO initializes a degenerate rectangle

      4 passing (1.02 ms)
      0 skipped
      0 failing

    normalizes origin and size
      ✓ normalizing(10, 10, -10, -10) will put the origin in (0, 0)
      ✓ normalizing(10, 10, -10, -10) will make the width positive
      ✓ normalizing(10, 10, -10, -10) will make the height positive
      ✓ equality to operate on normalized rectangles

      4 passing (627.00 µs)
      0 skipped
      0 failing

    can check for equality
      ✓ a rectangle to be equal it itself
      ✓ a rectangle to not be equal to null
      ✓ null to not be equal to a rectangle
      ✓ two rectangles with different values to not be equal

      4 passing (494.00 µs)
      0 skipped
      0 failing

    can check for contained points
      ✓ a rectangle to contain its top left corner
      ✓ a rectangle to contain its top right corner
      ✓ a rectangle to contain its bottom right corner
      ✓ a rectangle to contain its bottom left corner
      ✓ a rectangle to contain its center
      ✓ a rectangle to not contain a point outside its boundaries

      6 passing (830.00 µs)
      0 skipped
      0 failing

    can check for contained rectangles
      ✓ a rectangle to contain itself
      ✓ the smaller rectangle to not contain the larger one
      ✓ the larger rectangle to contain the smaller one

      3 passing (413.00 µs)
      0 skipped
      0 failing

    can compute intersections
      ✓ intersection between (0, 0, 10, 10) and (5, 5, 15, 15) not be empty
      ✓ origin of intersection to be at (5, 5)
      ✓ size of intersection to be (5, 5)
      ✓ intersection between (5, 5, 5, 5) and (11, 11, 2, 2) to be empty
      ✓ empty intersection to be a degenerate rectangle

      5 passing (641.00 µs)
      0 skipped
      0 failing

    can compute unions
      ✓ union to take the minimum normalize origin
      ✓ union to take the maximum normalized size
      ✓ union rectangle to contain original rectangle A
      ✓ union rectangle to contain original rectangle B

      4 passing (462.00 µs)
      0 skipped
      0 failing

    can compute the area
      ✓ area to be width × height

      1 passing (152.00 µs)
      0 skipped
      0 failing

    can offset origin and size
      ✓ offset to move the origin
      ✓ offset to keep the size

      2 passing (263.00 µs)
      0 skipped
      0 failing

    can inset origin and size
      ✓ inset(2, 2) to move the origin
      ✓ inset(2, 2) to shrink the size
      ✓ inset(2, -2) to move back the origin
      ✓ inset(2, -2) to shrink the width
      ✓ inset(2, -2) to expand the height

      5 passing (722.00 µs)
      0 skipped
      0 failing

    can round to the nearest integer
      ✓ round() area is larger than or equal to the original rectangle's area
      ✓ round() may not contain the original rectangle
      ✓ round_to_pixel() may not contain the original rectangle
      ✓ rounding is stable

      4 passing (921.00 µs)
      0 skipped
      0 failing

    can round the extents of a rectangle to the nearest integer
      ✓ round_extents()'s result to contain top-left corner of the original rectangle
      ✓ round_extents()'s result to contain top-right corner of the original rectangle
      ✓ round_extents()'s result to contain bottom-left corner of the original rectangle
      ✓ round_extents()'s result to contain bottom-right corner of the original rectangle
      ✓ round_extents()'s result to contain the original rectangle
      ✓ round_extents()'s rounding to be stable

      6 passing (676.00 µs)
      0 skipped
      0 failing

    can expand
      ✓ expanding behind the origin changes the origin
      ✓ expanding behind the origin does not change the size
      ✓ expanded rectangle contains original rectangle
      ✓ expanding after the anti-origin does not change the origin
      ✓ expanding after the anti-origin changes the size
      ✓ expanded rectangle contains original rectangle
      ✓ expanding half in/half out does not change the origin
      ✓ expanding horizontally inside the rectangle to not change width
      ✓ expanding vertically outside the rectangle to change the height
      ✓ expanded rectangle contains original rectangle

      10 passing (1.24 ms)
      0 skipped
      0 failing

    can interpolate
      ✓ lerp(0) to produce the initial rectangle
      ✓ lerp(1) to produce the final rectangle
      ✓ lerp(0.25) to produce the expect rectangle

      3 passing (450.00 µs)
      0 skipped
      0 failing

    can scale
      ✓ Scaling by 1 does not change the rectangle
      ✓ Scaling by (2, 5) preserves the origin sign but changes the size sign
      ✓ Scaling by a fraction moves the origin and reduces the size
      ✓ Scaling by (0, -10) moves the origin in (0, 0) and flips the negative sign of the size

      4 passing (481.00 µs)
      0 skipped
      0 failing


Total
65 passing (17.92 ms)
0 skipped
0 failing

PASS: graphene-1.0/rect.test
Running test: graphene-1.0/point3d.test

  graphene_point3d_t
    allocates and initializes data
      ✓ allocation to not fail
      ✓ init_from_point to copy the source
      ✓ init to set the X coordinate
      ✓ init to set the Y coordinate
      ✓ init to set the Z coordinate
      ✓ init from vec3 to set the X coordinate
      ✓ init from vec3 to set the Y coordinate
      ✓ init from vec3 to set the Z coordinate

      8 passing (1.77 ms)
      0 skipped
      0 failing

    provides a zero point
      ✓ graphene_point3d_zero() to not return null
      ✓ graphene_point3d_zero() to return the same pointer
      ✓ graphene_point3d_zero() to return (0, 0, 0)

      3 passing (408.00 µs)
      0 skipped
      0 failing

    has exact equality
      ✓ a point to be equal to itself
      ✓ a point to not be equal to null
      ✓ null to not be equal to a point
      ✓ two points initialized to the same coordinates to be equal
      ✓ two points initialized to different coordinates not to be equal

      5 passing (696.00 µs)
      0 skipped
      0 failing

    has near equality
      ✓ a point to be near itself
      ✓ (0.1, 0.1, 0.1) to be within 0.2 units from (0, 0, 0)
      ✓ (0.1, 0.1, 0.1) to not be within 0.001 from (0, 0, 0)

      3 passing (330.00 µs)
      0 skipped
      0 failing

    interpolates between values
      ✓ lerp(0, 1, 0.0) = 0
      ✓ lerp(0, 1, 0.5) = 0.5
      ✓ lerp(0, 1, 1.0) = 1

      3 passing (365.00 µs)
      0 skipped
      0 failing

    scales coordinates
      ✓ scale(2) scales the X coordinate
      ✓ scale(2) scales the Y coordinate
      ✓ scale(2) scales the Z coordinate
      ✓ scale(0.5) scales the X coordinate
      ✓ scale(0.5) scales the Y coordinate
      ✓ scale(0.5) scales the Z coordinate

      6 passing (698.00 µs)
      0 skipped
      0 failing

    implements cross product
      ✓ cross(a, b) matches both point3d and vec3

      1 passing (325.00 µs)
      0 skipped
      0 failing

    implements dot product
      ✓ dot(a, b) matches both point3d and vec3

      1 passing (211.00 µs)
      0 skipped
      0 failing

    implements length
      ✓ length is the square root of the sum components squared

      1 passing (179.00 µs)
      0 skipped
      0 failing

    implements normalization
      ✓ normalization to change the point

      1 passing (202.00 µs)
      0 skipped
      0 failing

    allows normalizing within a viewport
      ✓ original point and normalized point not to match
      ✓ normalized X coordinate to be [-1, 1)
      ✓ normalized Y coordinate to be [-1, 1)
      ✓ normalized Z coordinate to be [-1, 1)

      4 passing (557.00 µs)
      0 skipped
      0 failing


Total
36 passing (12.53 ms)
0 skipped
0 failing

PASS: graphene-1.0/point3d.test
SUMMARY: total=18; passed=18; skipped=0; failed=0; user=0.9s; system=1.0s; maxrss=2648
