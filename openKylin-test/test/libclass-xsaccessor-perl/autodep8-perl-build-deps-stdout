t/01hash_basic.t .............. 
1..39
ok 1 - use Class::XSAccessor;
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10 - Foo->can('get_c')
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18 - scalar copied properly
ok 19
ok 20
ok 21
ok 22
ok 23
ok 24
ok 25
ok 26
ok 27
ok 28
ok 29
ok 30
ok 31
ok 32
ok 33
ok 34
ok 35
ok 36
ok 37
ok 38 - Foo->can('also_get_c')
ok 39
ok
t/02hash_accessor.t ........... 
1..31
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18
ok 19
ok 20
ok 21
ok 22
ok 23
ok 24
ok 25
ok 26
ok 27
ok 28
ok 29
ok 30
ok 31
ok
t/03hash_predicate.t .......... 
1..29
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18
ok 19
ok 20 - exists_predicates on undef elem is true
ok 21 - exists_predicates on non-existant elem is false
ok 22
ok 23
ok 24
ok 25
ok 26
ok 27
ok 28
ok 29
ok
t/04hash_chained.t ............ 
1..6
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok
t/05hash_replace.t ............ 
1..4
ok 1
ok 2
ok 3 - refuses to replace by default
ok 4 - replacing allowed
ok
t/06hash_constructor.t ........ 
1..23
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18
ok 19
ok 20 - object not reaped in outer scope
ok 21 - An object of class 'Class::XSAccessor::Test' isa 'Class::XSAccessor::Test'
ok 22 - Class::XSAccessor::Test->can(...)
ok 23
ok
t/07hash_boolean.t ............ 
1..10
ok 1
ok 2 - Foo->can(...)
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok
t/08hash_entersub.t ........... 
1..68
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18
ok 19
ok 20
ok 21
ok 22
ok 23
ok 24
ok 25
ok 26
ok 27
ok 28
ok 29
ok 30
ok 31
ok 32
ok 33
ok 34
ok 35
ok 36
ok 37
ok 38
ok 39
ok 40
ok 41
ok 42
ok 43
ok 44
ok 45
ok 46
ok 47
ok 48
ok 49
ok 50
ok 51
ok 52
ok 53
ok 54
ok 55
ok 56
ok 57
ok 58
ok 59
ok 60
ok 61
ok 62
ok 63
ok 64
ok 65
ok 66
ok 67
ok 68
ok
t/09hash_use_hash.t ........... 
1..35
ok 1 - use Class::XSAccessor;
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16 - scalar copied properly
ok 17
ok 18
ok 19
ok 20
ok 21
ok 22
ok 23
ok 24
ok 25
ok 26
ok 27
ok 28
ok 29
ok 30
ok 31
ok 32
ok 33
ok 34
ok 35
ok
t/10hash_lvalue.t ............. 
1..11
ok 1 - use Class::XSAccessor;
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7 - assignment to !exists hash element is okay
ok 8
ok 9 - assignment to !exists hash element is okay
ok 10 - assignment to !exists hash element is okay
ok 11
ok
t/31array_basic.t ............. 
1..26
ok 1 - use Class::XSAccessor::Array;
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16 - scalar copied properly
ok 17
ok 18
ok 19
ok 20
ok 21
ok 22
ok 23
ok 24
ok 25
ok 26
ok
t/32array_accessor.t .......... 
1..12
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok
t/33array_predicate.t ......... 
1..12
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok
t/34array_chained.t ........... 
1..6
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok
t/35array_replace.t ........... 
1..4
ok 1
ok 2
ok 3 - refuses to replace by default
ok 4 - replacing allowed
ok
t/36array_constructor.t ....... 
1..21
ok 1
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18 - object not reaped in outer scope
ok 19 - An object of class 'Class::XSAccessor::Test' isa 'Class::XSAccessor::Test'
ok 20 - Class::XSAccessor::Test->can(...)
ok 21
ok
t/37array_boolean.t ........... 
1..10
ok 1
ok 2 - Foo->can(...)
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok
t/38array_use_hash.t .......... 
1..26
ok 1 - use Class::XSAccessor::Array;
ok 2
ok 3
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16 - scalar copied properly
ok 17
ok 18
ok 19
ok 20
ok 21
ok 22
ok 23
ok 24
ok 25
ok 26
ok
t/39array_lvalue.t ............ 
1..6
ok 1 - use Class::XSAccessor::Array;
ok 2
ok 3
ok 4
ok 5
ok 6
ok
t/40hash_bad_call.t ........... 
1..19
ok 1 - use Class::XSAccessor;
ok 2 - An object of class 'Hash' isa 'Hash'
ok 3 - Hash->can(...)
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok 14
ok 15
ok 16
ok 17
ok 18
ok 19
ok
t/41array_bad_call.t .......... 
1..13
ok 1 - use Class::XSAccessor;
ok 2 - An object of class 'Array' isa 'Array'
ok 3 - Array->can(...)
ok 4
ok 5
ok 6
ok 7
ok 8
ok 9
ok 10
ok 11
ok 12
ok 13
ok
t/50reentrant_goto_sigsegv.t .. 
1..14
not ok 1 # TODO & SKIP bug in perls < 5.8.9
not ok 2 # TODO & SKIP bug in perls < 5.8.9
not ok 3 # TODO & SKIP bug in perls < 5.8.9
not ok 4 # TODO & SKIP bug in perls < 5.8.9
not ok 5 # TODO & SKIP bug in perls < 5.8.9
not ok 6 # TODO & SKIP bug in perls < 5.8.9
not ok 7 # TODO & SKIP bug in perls < 5.8.9
not ok 8 # TODO & SKIP bug in perls < 5.8.9
not ok 9 # TODO & SKIP bug in perls < 5.8.9
not ok 10 # TODO & SKIP bug in perls < 5.8.9
not ok 11 # TODO & SKIP bug in perls < 5.8.9
not ok 12 # TODO & SKIP bug in perls < 5.8.9
not ok 13 # TODO & SKIP bug in perls < 5.8.9
not ok 14 # TODO & SKIP bug in perls < 5.8.9
ok
t/70bad_arguments.t ........... 
1..9
ok 1 - use Class::XSAccessor;
ok 2 - use Class::XSAccessor::Array;
ok 3
ok 4 - Array as Array object (errmsg: )
ok 5 - Array as Hash object (errmsg: Class::XSAccessor: invalid instance method invocant: no hash ref supplied at t/70bad_arguments.t line 62.)
ok 6 - Hash as Array object (errmsg: Class::XSAccessor: invalid instance method invocant: no array ref supplied at t/70bad_arguments.t line 62.)
ok 7 - Hash as Hash object (errmsg: )
ok 8 - Scalar as Array object (errmsg: Class::XSAccessor: invalid instance method invocant: no array ref supplied at t/70bad_arguments.t line 62.)
ok 9 - Scalar as Hash object (errmsg: Class::XSAccessor: invalid instance method invocant: no hash ref supplied at t/70bad_arguments.t line 62.)
ok
t/80threadbomb.t .............. 
1..16
ok - starting method generation, thread 1
ok - starting method generation, thread 2
ok - starting method generation, thread 3
ok - starting method generation, thread 4
ok - starting method generation, thread 5
ok - done with method generation, thread 3
ok - done, thread 3
ok - done with method generation, thread 2
ok - done with method generation, thread 4
ok - done with method generation, thread 1
ok - done, thread 2
ok - done, thread 4
ok - done, thread 1
ok - done with method generation, thread 5
ok - done, thread 5
ok - all reaped
ok
All tests successful.
Files=24, Tests=450, 26 wallclock secs ( 1.07 usr  0.47 sys + 22.93 cusr  6.03 csys = 30.50 CPU)
Result: PASS
