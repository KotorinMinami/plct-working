t/00-report-prereqs.t .. 
1..1
# 
# Versions for all modules listed in static metadata (including optional ones):
# 
# === Configure Requires ===
# 
#     Module              Want Have
#     ------------------- ---- ----
#     ExtUtils::MakeMaker  any 7.34
# 
# === Test Requires ===
# 
#     Module              Want     Have
#     ------------------- ---- --------
#     ExtUtils::MakeMaker  any     7.34
#     File::Spec           any     3.78
#     Test::More          0.96 1.302162
# 
# === Test Recommends ===
# 
#     Module         Want     Have
#     ---------- -------- --------
#     CPAN::Meta 2.120900 2.150010
# 
# === Runtime Requires ===
# 
#     Module                   Want Have
#     ------------------------ ---- ----
#     Carp                      any 1.50
#     Class::Data::Inheritable 0.02 0.09
#     Devel::StackTrace        2.00 2.04
#     Scalar::Util              any 1.50
#     base                      any 2.27
#     overload                  any 1.30
#     strict                    any 1.11
#     warnings                  any 1.44
# 
ok 1 - Reported prereqs
ok
t/basic.t .............. 
ok 1 - '$@' isa 'Exception::Class::Base'
ok 2 - Exception's error message should be 'err'
ok 3 - Exception's message should be 'err'
ok 4 - Description should be 'Generic exception'
ok 5 - Package should be 'main'
ok 6 - File should end with 't/basic.t'
ok 7 - Line should be 52
ok 8 - PID should be 4026
ok 9 - PID is also in context_hash
ok 10 - UID should be 1000
ok 11 - EUID should be 1000
ok 12 - GID should be 1000 27 1000
ok 13 - EGID should be 1000 27 1000
ok 14 - Exception object should have a stacktrace
ok 15 - An object of class 'TestException' isa 'TestException'
ok 16 - Description should be 'Generic exception'
ok 17 - An object of class 'SubTestException' isa 'SubTestException'
ok 18 - An object of class 'SubTestException' isa 'TestException'
ok 19 - An object of class 'SubTestException' isa 'Exception::Class::Base'
ok 20 - Description should be "blah'\blah"
ok 21 - An object of class 'YAE' isa 'SubTestException'
ok 22 - An object of class 'BlahBlah' isa 'FooException'
ok 23 - An object of class 'BlahBlah' isa 'Exception::Class::Base'
ok 24 - Exception::Class::Base class 'Trace' method should return false
ok 25 - Setting show_trace to true should override value of Trace
ok 26 - Exception::Class::Base class 'Trace' method should return true
ok 27 - Exception should have a stack trace
ok 28 - Setting show_trace to false should override value of Trace
ok 29 - Trace should contain frames from Exception::Class::Base package
ok 30 - Overloading in string context
ok 31 - Overloaded stringification should include a stack trace
ok 32 - Exception's error message should be 'err'
ok 33 - Exception's message should be 'err'
ok 34 - Error message should be 'dead'
ok 35 - Overriding as_string in subclass
ok 36 - FieldsException->can('foo')
ok 37 - Exception's foo method should return 5
ok 38 - Exception's fields_hash should contain foo=>5,bar=>undef
ok 39 - MoreFieldsException->can('foo')
ok 40 - Exception's foo method should return 15
ok 41 - MoreFieldsException->can('yip')
ok 42 - Exception's foo method should return 10
ok 43 - FieldsException should stringify to include the value of foo
ok 44 - Single arg constructor should work
ok 45 - Single arg constructor should just set error/message
ok 46 - References should be saved in the stack trace
ok 47 - References should be saved in the stack trace
ok 48 - Throw exception via convenience sub (one param)
ok 49 - check error message
ok 50 - Throw exception via convenience sub (named params)
ok 51 - check error message
ok 52 - check "thing" field
ok 53 - package matches current package
ok 54 - overloading is ignored by default
ok 55 - overloading is now respected
ok 56 - TestException should be in the return from Classes()
ok 57 - arguments are not truncated by default
ok 58 - arguments are now truncated
1..58
ok
t/caught.t ............. 
ok 1 - caught returns false for wrong class
ok 2 - caught returns false for wrong class
ok 3 - caught returns exception for correct class
ok 4 - An object of class 'Foo' isa 'Foo'
ok 5 - message is "foo"
ok 6 - Foo->caught() returns exception
ok 7 - An object of class 'Foo' isa 'Foo'
ok 8 - Foo->caught() returns exception
ok 9 - An object of class 'Foo' isa 'Foo'
1..9
ok
t/context.t ............ 
ok 1 - has trace detail
ok 2 - has no trace detail
1..2
ok
t/ecb-standalone.t ..... 
ok 1 - 'can throw MyE without loading Exception::Class' isa 'MyE'
ok 2 - caught MyE exception
1..2
ok
t/field-names.t ........ 
ok 1 - require Exception::Class;
ok 2 - GoodFields did not have a problem
ok 3 - Field name <$foo> throws an error
ok 4 - Error messages notes invalid field name
ok 5 - Field name <f'oo> throws an error
ok 6 - Error messages notes invalid field name
ok 7 - Field name <f oo> throws an error
ok 8 - Error messages notes invalid field name
1..8
ok
t/ignore.t ............. 
ok 1 - Check for unwanted frames
ok 2 - Check for unwanted frames
ok 3 - Check for unwanted frames
ok 4 - Check for unwanted frames
ok 5 - Check for unwanted frames
ok 6 - Check for unwanted frames
1..6
ok
All tests successful.
Files=7, Tests=86,  8 wallclock secs ( 0.42 usr  0.21 sys +  6.22 cusr  2.11 csys =  8.96 CPU)
Result: PASS
