creating test binaries
   * gcc demo/test.o
   * gcc demo/shared.o
   * gcc bn_cutoffs.o
   * gcc bn_deprecated.o
   * gcc bn_mp_2expt.o
   * gcc bn_mp_abs.o
   * gcc bn_mp_add.o
   * gcc bn_mp_add_d.o
   * gcc bn_mp_addmod.o
   * gcc bn_mp_and.o
   * gcc bn_mp_clamp.o
   * gcc bn_mp_clear.o
   * gcc bn_mp_clear_multi.o
   * gcc bn_mp_cmp.o
   * gcc bn_mp_cmp_d.o
   * gcc bn_mp_cmp_mag.o
   * gcc bn_mp_cnt_lsb.o
   * gcc bn_mp_complement.o
   * gcc bn_mp_copy.o
   * gcc bn_mp_count_bits.o
   * gcc bn_mp_decr.o
   * gcc bn_mp_div.o
   * gcc bn_mp_div_2.o
   * gcc bn_mp_div_2d.o
   * gcc bn_mp_div_3.o
   * gcc bn_mp_div_d.o
   * gcc bn_mp_dr_is_modulus.o
   * gcc bn_mp_dr_reduce.o
   * gcc bn_mp_dr_setup.o
   * gcc bn_mp_error_to_string.o
   * gcc bn_mp_exch.o
   * gcc bn_mp_expt_u32.o
   * gcc bn_mp_exptmod.o
   * gcc bn_mp_exteuclid.o
   * gcc bn_mp_fread.o
   * gcc bn_mp_from_sbin.o
   * gcc bn_mp_from_ubin.o
   * gcc bn_mp_fwrite.o
   * gcc bn_mp_gcd.o
   * gcc bn_mp_get_double.o
   * gcc bn_mp_get_i32.o
   * gcc bn_mp_get_i64.o
   * gcc bn_mp_get_l.o
   * gcc bn_mp_get_ll.o
   * gcc bn_mp_get_mag_u32.o
   * gcc bn_mp_get_mag_u64.o
   * gcc bn_mp_get_mag_ul.o
   * gcc bn_mp_get_mag_ull.o
   * gcc bn_mp_grow.o
   * gcc bn_mp_incr.o
   * gcc bn_mp_init.o
   * gcc bn_mp_init_copy.o
   * gcc bn_mp_init_i32.o
   * gcc bn_mp_init_i64.o
   * gcc bn_mp_init_l.o
   * gcc bn_mp_init_ll.o
   * gcc bn_mp_init_multi.o
   * gcc bn_mp_init_set.o
   * gcc bn_mp_init_size.o
   * gcc bn_mp_init_u32.o
   * gcc bn_mp_init_u64.o
   * gcc bn_mp_init_ul.o
   * gcc bn_mp_init_ull.o
   * gcc bn_mp_invmod.o
   * gcc bn_mp_is_square.o
   * gcc bn_mp_iseven.o
   * gcc bn_mp_isodd.o
   * gcc bn_mp_kronecker.o
   * gcc bn_mp_lcm.o
   * gcc bn_mp_log_u32.o
   * gcc bn_mp_lshd.o
   * gcc bn_mp_mod.o
   * gcc bn_mp_mod_2d.o
   * gcc bn_mp_mod_d.o
   * gcc bn_mp_montgomery_calc_normalization.o
   * gcc bn_mp_montgomery_reduce.o
   * gcc bn_mp_montgomery_setup.o
   * gcc bn_mp_mul.o
   * gcc bn_mp_mul_2.o
   * gcc bn_mp_mul_2d.o
   * gcc bn_mp_mul_d.o
   * gcc bn_mp_mulmod.o
   * gcc bn_mp_neg.o
   * gcc bn_mp_or.o
   * gcc bn_mp_pack.o
   * gcc bn_mp_pack_count.o
   * gcc bn_mp_prime_fermat.o
   * gcc bn_mp_prime_frobenius_underwood.o
   * gcc bn_mp_prime_is_prime.o
   * gcc bn_mp_prime_miller_rabin.o
   * gcc bn_mp_prime_next_prime.o
   * gcc bn_mp_prime_rabin_miller_trials.o
   * gcc bn_mp_prime_rand.o
   * gcc bn_mp_prime_strong_lucas_selfridge.o
   * gcc bn_mp_radix_size.o
   * gcc bn_mp_radix_smap.o
   * gcc bn_mp_rand.o
   * gcc bn_mp_read_radix.o
   * gcc bn_mp_reduce.o
   * gcc bn_mp_reduce_2k.o
   * gcc bn_mp_reduce_2k_l.o
   * gcc bn_mp_reduce_2k_setup.o
   * gcc bn_mp_reduce_2k_setup_l.o
   * gcc bn_mp_reduce_is_2k.o
   * gcc bn_mp_reduce_is_2k_l.o
   * gcc bn_mp_reduce_setup.o
   * gcc bn_mp_root_u32.o
   * gcc bn_mp_rshd.o
   * gcc bn_mp_sbin_size.o
   * gcc bn_mp_set.o
   * gcc bn_mp_set_double.o
   * gcc bn_mp_set_i32.o
   * gcc bn_mp_set_i64.o
   * gcc bn_mp_set_l.o
   * gcc bn_mp_set_ll.o
   * gcc bn_mp_set_u32.o
   * gcc bn_mp_set_u64.o
   * gcc bn_mp_set_ul.o
   * gcc bn_mp_set_ull.o
   * gcc bn_mp_shrink.o
   * gcc bn_mp_signed_rsh.o
   * gcc bn_mp_sqr.o
   * gcc bn_mp_sqrmod.o
   * gcc bn_mp_sqrt.o
   * gcc bn_mp_sqrtmod_prime.o
   * gcc bn_mp_sub.o
   * gcc bn_mp_sub_d.o
   * gcc bn_mp_submod.o
   * gcc bn_mp_to_radix.o
   * gcc bn_mp_to_sbin.o
   * gcc bn_mp_to_ubin.o
   * gcc bn_mp_ubin_size.o
   * gcc bn_mp_unpack.o
   * gcc bn_mp_xor.o
   * gcc bn_mp_zero.o
   * gcc bn_prime_tab.o
   * gcc bn_s_mp_add.o
   * gcc bn_s_mp_balance_mul.o
   * gcc bn_s_mp_exptmod.o
   * gcc bn_s_mp_exptmod_fast.o
   * gcc bn_s_mp_get_bit.o
   * gcc bn_s_mp_invmod_fast.o
   * gcc bn_s_mp_invmod_slow.o
   * gcc bn_s_mp_karatsuba_mul.o
   * gcc bn_s_mp_karatsuba_sqr.o
   * gcc bn_s_mp_montgomery_reduce_fast.o
   * gcc bn_s_mp_mul_digs.o
   * gcc bn_s_mp_mul_digs_fast.o
   * gcc bn_s_mp_mul_high_digs.o
   * gcc bn_s_mp_mul_high_digs_fast.o
   * gcc bn_s_mp_prime_is_divisible.o
   * gcc bn_s_mp_rand_jenkins.o
   * gcc bn_s_mp_rand_platform.o
   * gcc bn_s_mp_reverse.o
   * gcc bn_s_mp_sqr.o
   * gcc bn_s_mp_sqr_fast.o
   * gcc bn_s_mp_sub.o
   * gcc bn_s_mp_toom_mul.o
   * gcc bn_s_mp_toom_sqr.o
ar rv libtommath.a bn_cutoffs.o bn_deprecated.o bn_mp_2expt.o bn_mp_abs.o bn_mp_add.o bn_mp_add_d.o bn_mp_addmod.o bn_mp_and.o bn_mp_clamp.o bn_mp_clear.o bn_mp_clear_multi.o bn_mp_cmp.o bn_mp_cmp_d.o bn_mp_cmp_mag.o bn_mp_cnt_lsb.o bn_mp_complement.o bn_mp_copy.o bn_mp_count_bits.o bn_mp_decr.o bn_mp_div.o bn_mp_div_2.o bn_mp_div_2d.o bn_mp_div_3.o bn_mp_div_d.o bn_mp_dr_is_modulus.o bn_mp_dr_reduce.o bn_mp_dr_setup.o bn_mp_error_to_string.o bn_mp_exch.o bn_mp_expt_u32.o bn_mp_exptmod.o bn_mp_exteuclid.o bn_mp_fread.o bn_mp_from_sbin.o bn_mp_from_ubin.o bn_mp_fwrite.o bn_mp_gcd.o bn_mp_get_double.o bn_mp_get_i32.o bn_mp_get_i64.o bn_mp_get_l.o bn_mp_get_ll.o bn_mp_get_mag_u32.o bn_mp_get_mag_u64.o bn_mp_get_mag_ul.o bn_mp_get_mag_ull.o bn_mp_grow.o bn_mp_incr.o bn_mp_init.o bn_mp_init_copy.o bn_mp_init_i32.o bn_mp_init_i64.o bn_mp_init_l.o bn_mp_init_ll.o bn_mp_init_multi.o bn_mp_init_set.o bn_mp_init_size.o bn_mp_init_u32.o bn_mp_init_u64.o bn_mp_init_ul.o bn_mp_init_ull.o bn_mp_invmod.o bn_mp_is_square.o bn_mp_iseven.o bn_mp_isodd.o bn_mp_kronecker.o bn_mp_lcm.o bn_mp_log_u32.o bn_mp_lshd.o bn_mp_mod.o bn_mp_mod_2d.o bn_mp_mod_d.o bn_mp_montgomery_calc_normalization.o bn_mp_montgomery_reduce.o bn_mp_montgomery_setup.o bn_mp_mul.o bn_mp_mul_2.o bn_mp_mul_2d.o bn_mp_mul_d.o bn_mp_mulmod.o bn_mp_neg.o bn_mp_or.o bn_mp_pack.o bn_mp_pack_count.o bn_mp_prime_fermat.o bn_mp_prime_frobenius_underwood.o bn_mp_prime_is_prime.o bn_mp_prime_miller_rabin.o bn_mp_prime_next_prime.o bn_mp_prime_rabin_miller_trials.o bn_mp_prime_rand.o bn_mp_prime_strong_lucas_selfridge.o bn_mp_radix_size.o bn_mp_radix_smap.o bn_mp_rand.o bn_mp_read_radix.o bn_mp_reduce.o bn_mp_reduce_2k.o bn_mp_reduce_2k_l.o bn_mp_reduce_2k_setup.o bn_mp_reduce_2k_setup_l.o bn_mp_reduce_is_2k.o bn_mp_reduce_is_2k_l.o bn_mp_reduce_setup.o bn_mp_root_u32.o bn_mp_rshd.o bn_mp_sbin_size.o bn_mp_set.o bn_mp_set_double.o bn_mp_set_i32.o bn_mp_set_i64.o bn_mp_set_l.o bn_mp_set_ll.o bn_mp_set_u32.o bn_mp_set_u64.o bn_mp_set_ul.o bn_mp_set_ull.o bn_mp_shrink.o bn_mp_signed_rsh.o bn_mp_sqr.o bn_mp_sqrmod.o bn_mp_sqrt.o bn_mp_sqrtmod_prime.o bn_mp_sub.o bn_mp_sub_d.o bn_mp_submod.o bn_mp_to_radix.o bn_mp_to_sbin.o bn_mp_to_ubin.o bn_mp_ubin_size.o bn_mp_unpack.o bn_mp_xor.o bn_mp_zero.o bn_prime_tab.o bn_s_mp_add.o bn_s_mp_balance_mul.o bn_s_mp_exptmod.o bn_s_mp_exptmod_fast.o bn_s_mp_get_bit.o bn_s_mp_invmod_fast.o bn_s_mp_invmod_slow.o bn_s_mp_karatsuba_mul.o bn_s_mp_karatsuba_sqr.o bn_s_mp_montgomery_reduce_fast.o bn_s_mp_mul_digs.o bn_s_mp_mul_digs_fast.o bn_s_mp_mul_high_digs.o bn_s_mp_mul_high_digs_fast.o bn_s_mp_prime_is_divisible.o bn_s_mp_rand_jenkins.o bn_s_mp_rand_platform.o bn_s_mp_reverse.o bn_s_mp_sqr.o bn_s_mp_sqr_fast.o bn_s_mp_sub.o bn_s_mp_toom_mul.o bn_s_mp_toom_sqr.o
a - bn_cutoffs.o
a - bn_deprecated.o
a - bn_mp_2expt.o
a - bn_mp_abs.o
a - bn_mp_add.o
a - bn_mp_add_d.o
a - bn_mp_addmod.o
a - bn_mp_and.o
a - bn_mp_clamp.o
a - bn_mp_clear.o
a - bn_mp_clear_multi.o
a - bn_mp_cmp.o
a - bn_mp_cmp_d.o
a - bn_mp_cmp_mag.o
a - bn_mp_cnt_lsb.o
a - bn_mp_complement.o
a - bn_mp_copy.o
a - bn_mp_count_bits.o
a - bn_mp_decr.o
a - bn_mp_div.o
a - bn_mp_div_2.o
a - bn_mp_div_2d.o
a - bn_mp_div_3.o
a - bn_mp_div_d.o
a - bn_mp_dr_is_modulus.o
a - bn_mp_dr_reduce.o
a - bn_mp_dr_setup.o
a - bn_mp_error_to_string.o
a - bn_mp_exch.o
a - bn_mp_expt_u32.o
a - bn_mp_exptmod.o
a - bn_mp_exteuclid.o
a - bn_mp_fread.o
a - bn_mp_from_sbin.o
a - bn_mp_from_ubin.o
a - bn_mp_fwrite.o
a - bn_mp_gcd.o
a - bn_mp_get_double.o
a - bn_mp_get_i32.o
a - bn_mp_get_i64.o
a - bn_mp_get_l.o
a - bn_mp_get_ll.o
a - bn_mp_get_mag_u32.o
a - bn_mp_get_mag_u64.o
a - bn_mp_get_mag_ul.o
a - bn_mp_get_mag_ull.o
a - bn_mp_grow.o
a - bn_mp_incr.o
a - bn_mp_init.o
a - bn_mp_init_copy.o
a - bn_mp_init_i32.o
a - bn_mp_init_i64.o
a - bn_mp_init_l.o
a - bn_mp_init_ll.o
a - bn_mp_init_multi.o
a - bn_mp_init_set.o
a - bn_mp_init_size.o
a - bn_mp_init_u32.o
a - bn_mp_init_u64.o
a - bn_mp_init_ul.o
a - bn_mp_init_ull.o
a - bn_mp_invmod.o
a - bn_mp_is_square.o
a - bn_mp_iseven.o
a - bn_mp_isodd.o
a - bn_mp_kronecker.o
a - bn_mp_lcm.o
a - bn_mp_log_u32.o
a - bn_mp_lshd.o
a - bn_mp_mod.o
a - bn_mp_mod_2d.o
a - bn_mp_mod_d.o
a - bn_mp_montgomery_calc_normalization.o
a - bn_mp_montgomery_reduce.o
a - bn_mp_montgomery_setup.o
a - bn_mp_mul.o
a - bn_mp_mul_2.o
a - bn_mp_mul_2d.o
a - bn_mp_mul_d.o
a - bn_mp_mulmod.o
a - bn_mp_neg.o
a - bn_mp_or.o
a - bn_mp_pack.o
a - bn_mp_pack_count.o
a - bn_mp_prime_fermat.o
a - bn_mp_prime_frobenius_underwood.o
a - bn_mp_prime_is_prime.o
a - bn_mp_prime_miller_rabin.o
a - bn_mp_prime_next_prime.o
a - bn_mp_prime_rabin_miller_trials.o
a - bn_mp_prime_rand.o
a - bn_mp_prime_strong_lucas_selfridge.o
a - bn_mp_radix_size.o
a - bn_mp_radix_smap.o
a - bn_mp_rand.o
a - bn_mp_read_radix.o
a - bn_mp_reduce.o
a - bn_mp_reduce_2k.o
a - bn_mp_reduce_2k_l.o
a - bn_mp_reduce_2k_setup.o
a - bn_mp_reduce_2k_setup_l.o
a - bn_mp_reduce_is_2k.o
a - bn_mp_reduce_is_2k_l.o
a - bn_mp_reduce_setup.o
a - bn_mp_root_u32.o
a - bn_mp_rshd.o
a - bn_mp_sbin_size.o
a - bn_mp_set.o
a - bn_mp_set_double.o
a - bn_mp_set_i32.o
a - bn_mp_set_i64.o
a - bn_mp_set_l.o
a - bn_mp_set_ll.o
a - bn_mp_set_u32.o
a - bn_mp_set_u64.o
a - bn_mp_set_ul.o
a - bn_mp_set_ull.o
a - bn_mp_shrink.o
a - bn_mp_signed_rsh.o
a - bn_mp_sqr.o
a - bn_mp_sqrmod.o
a - bn_mp_sqrt.o
a - bn_mp_sqrtmod_prime.o
a - bn_mp_sub.o
a - bn_mp_sub_d.o
a - bn_mp_submod.o
a - bn_mp_to_radix.o
a - bn_mp_to_sbin.o
a - bn_mp_to_ubin.o
a - bn_mp_ubin_size.o
a - bn_mp_unpack.o
a - bn_mp_xor.o
a - bn_mp_zero.o
a - bn_prime_tab.o
a - bn_s_mp_add.o
a - bn_s_mp_balance_mul.o
a - bn_s_mp_exptmod.o
a - bn_s_mp_exptmod_fast.o
a - bn_s_mp_get_bit.o
a - bn_s_mp_invmod_fast.o
a - bn_s_mp_invmod_slow.o
a - bn_s_mp_karatsuba_mul.o
a - bn_s_mp_karatsuba_sqr.o
a - bn_s_mp_montgomery_reduce_fast.o
a - bn_s_mp_mul_digs.o
a - bn_s_mp_mul_digs_fast.o
a - bn_s_mp_mul_high_digs.o
a - bn_s_mp_mul_high_digs_fast.o
a - bn_s_mp_prime_is_divisible.o
a - bn_s_mp_rand_jenkins.o
a - bn_s_mp_rand_platform.o
a - bn_s_mp_reverse.o
a - bn_s_mp_sqr.o
a - bn_s_mp_sqr_fast.o
a - bn_s_mp_sub.o
a - bn_s_mp_toom_mul.o
a - bn_s_mp_toom_sqr.o
ranlib libtommath.a
gcc -I./ -Wall -Wsign-compare -Wextra -Wshadow -Wdeclaration-after-statement -Wbad-function-cast -Wcast-align -Wstrict-prototypes -Wpointer-arith -Wsystem-headers -O3 -funroll-loops -fomit-frame-pointer   demo/test.o demo/shared.o libtommath.a -o test
Runing test
Digit size 64 Bit 
Size of mp_digit: 8
Size of mp_word: 16
MP_DIGIT_BIT: 60
MP_PREC: 32
SEED: 0x63fa1967

TEST feature_detection



TEST trivial_stuff



TEST mp_get_set_i32



TEST mp_get_set_i64



TEST mp_and



TEST mp_cnt_lsb



TEST mp_complement



TEST mp_decr



TEST mp_div_3

      128      256      384      512      640      768      896     1024     1152     1280     1408     1536     1664     1792     1920     2048     2176     2304     2432     2560     2688     2816     2944     3072     3200     3328     3456     3584     3712     3840     3968     4096     4224     4352     4480     4608     4736     4864     4992     5120     5248     5376     5504     5632     5760     5888     6016     6144     6272     6400     6528     6656     6784     6912     7040     7168     7296     7424     7552     7680     7808     7936     8064     8192     8320     8448     8576     8704     8832     8960     9088     9216     9344     9472     9600     9728     9856     9984
Passed div_3 testing

TEST mp_dr_reduce

2 digit modulus.... passed3 digit modulus.... passed4 digit modulus.... passed5 digit modulus.... passed6 digit modulus.... passed7 digit modulus.... passed8 digit modulus.... passed9 digit modulus.... passed10 digit modulus.... passed11 digit modulus.... passed12 digit modulus.... passed13 digit modulus.... passed14 digit modulus.... passed15 digit modulus.... passed16 digit modulus.... passed17 digit modulus.... passed18 digit modulus.... passed19 digit modulus.... passed20 digit modulus.... passed21 digit modulus.... passed22 digit modulus.... passed23 digit modulus.... passed24 digit modulus.... passed25 digit modulus.... passed26 digit modulus.... passed27 digit modulus.... passed28 digit modulus.... passed29 digit modulus.... passed30 digit modulus.... passed31 digit modulus.... passed

TEST mp_pack_unpack



TEST mp_fread_fwrite



TEST mp_get_u32



TEST mp_get_u64

 r = 0x1 i = 0 r = 0x3 i = 1 r = 0x7 i = 2 r = 0xf i = 3 r = 0x1f i = 4 r = 0x3f i = 5 r = 0x7f i = 6 r = 0xff i = 7 r = 0x1ff i = 8 r = 0x3ff i = 9 r = 0x7ff i = 10 r = 0xfff i = 11 r = 0x1fff i = 12 r = 0x3fff i = 13 r = 0x7fff i = 14 r = 0xffff i = 15 r = 0x1ffff i = 16 r = 0x3ffff i = 17 r = 0x7ffff i = 18 r = 0xfffff i = 19 r = 0x1fffff i = 20 r = 0x3fffff i = 21 r = 0x7fffff i = 22 r = 0xffffff i = 23 r = 0x1ffffff i = 24 r = 0x3ffffff i = 25 r = 0x7ffffff i = 26 r = 0xfffffff i = 27 r = 0x1fffffff i = 28 r = 0x3fffffff i = 29 r = 0x7fffffff i = 30 r = 0xffffffff i = 31 r = 0x1ffffffff i = 32 r = 0x3ffffffff i = 33 r = 0x7ffffffff i = 34 r = 0xfffffffff i = 35 r = 0x1fffffffff i = 36 r = 0x3fffffffff i = 37 r = 0x7fffffffff i = 38 r = 0xffffffffff i = 39 r = 0x1ffffffffff i = 40 r = 0x3ffffffffff i = 41 r = 0x7ffffffffff i = 42 r = 0xfffffffffff i = 43 r = 0x1fffffffffff i = 44 r = 0x3fffffffffff i = 45 r = 0x7fffffffffff i = 46 r = 0xffffffffffff i = 47 r = 0x1ffffffffffff i = 48 r = 0x3ffffffffffff i = 49 r = 0x7ffffffffffff i = 50 r = 0xfffffffffffff i = 51 r = 0x1fffffffffffff i = 52 r = 0x3fffffffffffff i = 53 r = 0x7fffffffffffff i = 54 r = 0xffffffffffffff i = 55 r = 0x1ffffffffffffff i = 56 r = 0x3ffffffffffffff i = 57 r = 0x7ffffffffffffff i = 58 r = 0xfffffffffffffff i = 59 r = 0x1fffffffffffffff i = 60 r = 0x3fffffffffffffff i = 61 r = 0x7fffffffffffffff i = 62

TEST mp_get_ul

 t = 0x1 i = 0 t = 0x3 i = 1 t = 0x7 i = 2 t = 0xf i = 3 t = 0x1f i = 4 t = 0x3f i = 5 t = 0x7f i = 6 t = 0xff i = 7 t = 0x1ff i = 8 t = 0x3ff i = 9 t = 0x7ff i = 10 t = 0xfff i = 11 t = 0x1fff i = 12 t = 0x3fff i = 13 t = 0x7fff i = 14 t = 0xffff i = 15 t = 0x1ffff i = 16 t = 0x3ffff i = 17 t = 0x7ffff i = 18 t = 0xfffff i = 19 t = 0x1fffff i = 20 t = 0x3fffff i = 21 t = 0x7fffff i = 22 t = 0xffffff i = 23 t = 0x1ffffff i = 24 t = 0x3ffffff i = 25 t = 0x7ffffff i = 26 t = 0xfffffff i = 27 t = 0x1fffffff i = 28 t = 0x3fffffff i = 29 t = 0x7fffffff i = 30 t = 0xffffffff i = 31 t = 0x1ffffffff i = 32 t = 0x3ffffffff i = 33 t = 0x7ffffffff i = 34 t = 0xfffffffff i = 35 t = 0x1fffffffff i = 36 t = 0x3fffffffff i = 37 t = 0x7fffffffff i = 38 t = 0xffffffffff i = 39 t = 0x1ffffffffff i = 40 t = 0x3ffffffffff i = 41 t = 0x7ffffffffff i = 42 t = 0xfffffffffff i = 43 t = 0x1fffffffffff i = 44 t = 0x3fffffffffff i = 45 t = 0x7fffffffffff i = 46 t = 0xffffffffffff i = 47 t = 0x1ffffffffffff i = 48 t = 0x3ffffffffffff i = 49 t = 0x7ffffffffffff i = 50 t = 0xfffffffffffff i = 51 t = 0x1fffffffffffff i = 52 t = 0x3fffffffffffff i = 53 t = 0x7fffffffffffff i = 54 t = 0xffffffffffffff i = 55 t = 0x1ffffffffffffff i = 56 t = 0x3ffffffffffffff i = 57 t = 0x7ffffffffffffff i = 58 t = 0xfffffffffffffff i = 59 t = 0x1fffffffffffffff i = 60 t = 0x3fffffffffffffff i = 61 t = 0x7fffffffffffffff i = 62

TEST mp_log_u32



TEST mp_incr



TEST mp_invmod



TEST mp_is_square

     0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46    47    48    49    50    51    52    53    54    55    56    57    58    59    60    61    62    63    64    65    66    67    68    69    70    71    72    73    74    75    76    77    78    79    80    81    82    83    84    85    86    87    88    89    90    91    92    93    94    95    96    97    98    99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   228   229   230   231   232   233   234   235   236   237   238   239   240   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256   257   258   259   260   261   262   263   264   265   266   267   268   269   270   271   272   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   509   510   511   512   513   514   515   516   517   518   519   520   521   522   523   524   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   669   670   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   691   692   693   694   695   696   697   698   699   700   701   702   703   704   705   706   707   708   709   710   711   712   713   714   715   716   717   718   719   720   721   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   740   741   742   743   744   745   746   747   748   749   750   751   752   753   754   755   756   757   758   759   760   761   762   763   764   765   766   767   768   769   770   771   772   773   774   775   776   777   778   779   780   781   782   783   784   785   786   787   788   789   790   791   792   793   794   795   796   797   798   799   800   801   802   803   804   805   806   807   808   809   810   811   812   813   814   815   816   817   818   819   820   821   822   823   824   825   826   827   828   829   830   831   832   833   834   835   836   837   838   839   840   841   842   843   844   845   846   847   848   849   850   851   852   853   854   855   856   857   858   859   860   861   862   863   864   865   866   867   868   869   870   871   872   873   874   875   876   877   878   879   880   881   882   883   884   885   886   887   888   889   890   891   892   893   894   895   896   897   898   899   900   901   902   903   904   905   906   907   908   909   910   911   912   913   914   915   916   917   918   919   920   921   922   923   924   925   926   927   928   929   930   931   932   933   934   935   936   937   938   939   940   941   942   943   944   945   946   947   948   949   950   951   952   953   954   955   956   957   958   959   960   961   962   963   964   965   966   967   968   969   970   971   972   973   974   975   976   977   978   979   980   981   982   983   984   985   986   987   988   989   990   991   992   993   994   995   996   997   998   999



TEST mp_kronecker



TEST mp_montgomery_reduce

 digit size:  1 digit size:  2 digit size:  3 digit size:  4 digit size:  5 digit size:  6 digit size:  7 digit size:  8 digit size:  9 digit size: 1000



TEST mp_root_u32



TEST mp_or



TEST mp_prime_is_prime

Testing mp_prime_is_prime() with Arnault's pseudoprime  803...901 

Testing mp_prime_is_prime() with certified prime 2^1119 + 53

Testing (    safe-prime):        16 bits    Testing (    safe-prime):        17 bits    Testing (    safe-prime):        18 bits    Testing (    safe-prime):        19 bits    Testing (    safe-prime):        20 bits    Testing (    safe-prime):        21 bits    Testing (    safe-prime):        22 bits    Testing (    safe-prime):        23 bits    Testing (    safe-prime):        24 bits    Testing (    safe-prime):        25 bits    Testing (    safe-prime):        26 bits    Testing (    safe-prime):        27 bits    Testing (    safe-prime):        28 bits    Testing (    safe-prime):        29 bits    Testing (    safe-prime):        30 bits    Testing (    safe-prime):        31 bits    Testing (    safe-prime):        32 bits    Testing (    safe-prime):        33 bits    Testing (    safe-prime):        34 bits    Testing (    safe-prime):        35 bits    Testing (    safe-prime):        36 bits    Testing (    safe-prime):        37 bits    Testing (    safe-prime):        38 bits    Testing (    safe-prime):        39 bits    Testing (    safe-prime):        40 bits    Testing (    safe-prime):        41 bits    Testing (    safe-prime):        42 bits    Testing (    safe-prime):        43 bits    Testing (    safe-prime):        44 bits    Testing (    safe-prime):        45 bits    Testing (    safe-prime):        46 bits    Testing (    safe-prime):        47 bits    Testing (    safe-prime):        48 bits    Testing (    safe-prime):        49 bits    Testing (    safe-prime):        50 bits    Testing (    safe-prime):        51 bits    Testing (    safe-prime):        52 bits    Testing (    safe-prime):        53 bits    Testing (    safe-prime):        54 bits    Testing (    safe-prime):        55 bits    Testing (    safe-prime):        56 bits    Testing (    safe-prime):        57 bits    Testing (    safe-prime):        58 bits    Testing (    safe-prime):        59 bits    Testing (    safe-prime):        60 bits    Testing (    safe-prime):        61 bits    Testing (    safe-prime):        62 bits    Testing (    safe-prime):        63 bits    Testing (    safe-prime):        64 bits    Testing (    safe-prime):        65 bits    Testing (    safe-prime):        66 bits    Testing (    safe-prime):        67 bits    Testing (    safe-prime):        68 bits    Testing (    safe-prime):        69 bits    Testing (    safe-prime):        70 bits    Testing (    safe-prime):        71 bits    Testing (    safe-prime):        72 bits    Testing (    safe-prime):        73 bits    Testing (    safe-prime):        74 bits    Testing (    safe-prime):        75 bits    Testing (    safe-prime):        76 bits    Testing (    safe-prime):        77 bits    Testing (    safe-prime):        78 bits    Testing (    safe-prime):        79 bits    Testing (    safe-prime):        80 bits    Testing (    safe-prime):        81 bits    Testing (    safe-prime):        82 bits    Testing (    safe-prime):        83 bits    Testing (    safe-prime):        84 bits    Testing (    safe-prime):        85 bits    Testing (    safe-prime):        86 bits    Testing (    safe-prime):        87 bits    Testing (    safe-prime):        88 bits    Testing (    safe-prime):        89 bits    Testing (    safe-prime):        90 bits    Testing (    safe-prime):        91 bits    Testing (    safe-prime):        92 bits    Testing (    safe-prime):        93 bits    Testing (    safe-prime):        94 bits    Testing (    safe-prime):        95 bits    Testing (    safe-prime):        96 bits    Testing (    safe-prime):        97 bits    Testing (    safe-prime):        98 bits    Testing (    safe-prime):        99 bits    Testing (    safe-prime):       100 bits    Testing (    safe-prime):       101 bits    Testing (    safe-prime):       102 bits    Testing (    safe-prime):       103 bits    Testing (    safe-prime):       104 bits    Testing (    safe-prime):       105 bits    Testing (    safe-prime):       106 bits    Testing (    safe-prime):       107 bits    Testing (    safe-prime):       108 bits    Testing (    safe-prime):       109 bits    Testing (    safe-prime):       110 bits    Testing (    safe-prime):       111 bits    Testing (    safe-prime):       112 bits    Testing (    safe-prime):       113 bits    Testing (    safe-prime):       114 bits    Testing (    safe-prime):       115 bits    Testing (    safe-prime):       116 bits    Testing (    safe-prime):       117 bits    Testing (    safe-prime):       118 bits    Testing (    safe-prime):       119 bits    Testing (    safe-prime):       120 bits    Testing (    safe-prime):       121 bits    Testing (    safe-prime):       122 bits    Testing (    safe-prime):       123 bits    Testing (    safe-prime):       124 bits    Testing (    safe-prime):       125 bits    Testing (    safe-prime):       126 bits    Testing (    safe-prime):       127 bits    



TEST mp_prime_next_prime



TEST mp_prime_rand

Testing (not safe-prime):        10 bits    Testing (not safe-prime):        11 bits    Testing (not safe-prime):        12 bits    Testing (not safe-prime):        13 bits    Testing (not safe-prime):        14 bits    Testing (not safe-prime):        15 bits    Testing (not safe-prime):        16 bits    Testing (not safe-prime):        17 bits    Testing (not safe-prime):        18 bits    Testing (not safe-prime):        19 bits    Testing (not safe-prime):        20 bits    Testing (not safe-prime):        21 bits    Testing (not safe-prime):        22 bits    Testing (not safe-prime):        23 bits    Testing (not safe-prime):        24 bits    Testing (not safe-prime):        25 bits    Testing (not safe-prime):        26 bits    Testing (not safe-prime):        27 bits    Testing (not safe-prime):        28 bits    Testing (not safe-prime):        29 bits    Testing (not safe-prime):        30 bits    Testing (not safe-prime):        31 bits    Testing (not safe-prime):        32 bits    Testing (not safe-prime):        33 bits    Testing (not safe-prime):        34 bits    Testing (not safe-prime):        35 bits    Testing (not safe-prime):        36 bits    Testing (not safe-prime):        37 bits    Testing (not safe-prime):        38 bits    Testing (not safe-prime):        39 bits    Testing (not safe-prime):        40 bits    Testing (not safe-prime):        41 bits    Testing (not safe-prime):        42 bits    Testing (not safe-prime):        43 bits    Testing (not safe-prime):        44 bits    Testing (not safe-prime):        45 bits    Testing (not safe-prime):        46 bits    Testing (not safe-prime):        47 bits    Testing (not safe-prime):        48 bits    Testing (not safe-prime):        49 bits    Testing (not safe-prime):        50 bits    Testing (not safe-prime):        51 bits    Testing (not safe-prime):        52 bits    Testing (not safe-prime):        53 bits    Testing (not safe-prime):        54 bits    Testing (not safe-prime):        55 bits    Testing (not safe-prime):        56 bits    Testing (not safe-prime):        57 bits    Testing (not safe-prime):        58 bits    Testing (not safe-prime):        59 bits    Testing (not safe-prime):        60 bits    Testing (not safe-prime):        61 bits    Testing (not safe-prime):        62 bits    Testing (not safe-prime):        63 bits    Testing (not safe-prime):        64 bits    Testing (not safe-prime):        65 bits    Testing (not safe-prime):        66 bits    Testing (not safe-prime):        67 bits    Testing (not safe-prime):        68 bits    Testing (not safe-prime):        69 bits    Testing (not safe-prime):        70 bits    Testing (not safe-prime):        71 bits    Testing (not safe-prime):        72 bits    Testing (not safe-prime):        73 bits    Testing (not safe-prime):        74 bits    Testing (not safe-prime):        75 bits    Testing (not safe-prime):        76 bits    Testing (not safe-prime):        77 bits    Testing (not safe-prime):        78 bits    Testing (not safe-prime):        79 bits    Testing (not safe-prime):        80 bits    Testing (not safe-prime):        81 bits    Testing (not safe-prime):        82 bits    Testing (not safe-prime):        83 bits    Testing (not safe-prime):        84 bits    Testing (not safe-prime):        85 bits    Testing (not safe-prime):        86 bits    Testing (not safe-prime):        87 bits    Testing (not safe-prime):        88 bits    Testing (not safe-prime):        89 bits    Testing (not safe-prime):        90 bits    Testing (not safe-prime):        91 bits    Testing (not safe-prime):        92 bits    Testing (not safe-prime):        93 bits    Testing (not safe-prime):        94 bits    Testing (not safe-prime):        95 bits    Testing (not safe-prime):        96 bits    Testing (not safe-prime):        97 bits    Testing (not safe-prime):        98 bits    Testing (not safe-prime):        99 bits    Testing (not safe-prime):       100 bits    Testing (not safe-prime):       101 bits    Testing (not safe-prime):       102 bits    Testing (not safe-prime):       103 bits    Testing (not safe-prime):       104 bits    Testing (not safe-prime):       105 bits    Testing (not safe-prime):       106 bits    Testing (not safe-prime):       107 bits    Testing (not safe-prime):       108 bits    Testing (not safe-prime):       109 bits    Testing (not safe-prime):       110 bits    Testing (not safe-prime):       111 bits    Testing (not safe-prime):       112 bits    Testing (not safe-prime):       113 bits    Testing (not safe-prime):       114 bits    Testing (not safe-prime):       115 bits    Testing (not safe-prime):       116 bits    Testing (not safe-prime):       117 bits    Testing (not safe-prime):       118 bits    Testing (not safe-prime):       119 bits    Testing (not safe-prime):       120 bits    Testing (not safe-prime):       121 bits    Testing (not safe-prime):       122 bits    Testing (not safe-prime):       123 bits    Testing (not safe-prime):       124 bits    Testing (not safe-prime):       125 bits    Testing (not safe-prime):       126 bits    Testing (not safe-prime):       127 bits    


TEST mp_rand



TEST mp_read_radix

 '123456' a == 123456, length = 7
 '-123456' a == -123456, length = 8
 '0' a == 0, length = 2


TEST mp_read_write_ubin

mp_to_ubin_size  113
mp_to_ubin len = 113


TEST mp_read_write_sbin

mp_to_sbin_size  114
mp_to_sbin len = 114


TEST mp_reduce_2k

    3 bits(1)(2)........    4 bits(1)(2)........    5 bits(1)(2)........    6 bits(1)(2)........    7 bits(1)(2)........    8 bits(1)(2)........    9 bits(1)(2)........   10 bits(1)(2)........   11 bits(1)(2)........   12 bits(1)(2)........   13 bits(1)(2)........   14 bits(1)(2)........   15 bits(1)(2)........   16 bits(1)(2)........   17 bits(1)(2)........   18 bits(1)(2)........   19 bits(1)(2)........   20 bits(1)(2)........   21 bits(1)(2)........   22 bits(1)(2)........   23 bits(1)(2)........   24 bits(1)(2)........   25 bits(1)(2)........   26 bits(1)(2)........   27 bits(1)(2)........   28 bits(1)(2)........   29 bits(1)(2)........   30 bits(1)(2)........   31 bits(1)(2)........   32 bits(1)(2)........   33 bits(1)(2)........   34 bits(1)(2)........   35 bits(1)(2)........   36 bits(1)(2)........   37 bits(1)(2)........   38 bits(1)(2)........   39 bits(1)(2)........   40 bits(1)(2)........   41 bits(1)(2)........   42 bits(1)(2)........   43 bits(1)(2)........   44 bits(1)(2)........   45 bits(1)(2)........   46 bits(1)(2)........   47 bits(1)(2)........   48 bits(1)(2)........   49 bits(1)(2)........   50 bits(1)(2)........   51 bits(1)(2)........   52 bits(1)(2)........   53 bits(1)(2)........   54 bits(1)(2)........   55 bits(1)(2)........   56 bits(1)(2)........   57 bits(1)(2)........   58 bits(1)(2)........   59 bits(1)(2)........   60 bits(1)(2)........   61 bits(1)(2)........   62 bits(1)(2)........   63 bits(1)(2)........   64 bits(1)(2)........   65 bits(1)(2)........   66 bits(1)(2)........   67 bits(1)(2)........   68 bits(1)(2)........   69 bits(1)(2)........   70 bits(1)(2)........   71 bits(1)(2)........   72 bits(1)(2)........   73 bits(1)(2)........   74 bits(1)(2)........   75 bits(1)(2)........   76 bits(1)(2)........   77 bits(1)(2)........   78 bits(1)(2)........   79 bits(1)(2)........   80 bits(1)(2)........   81 bits(1)(2)........   82 bits(1)(2)........   83 bits(1)(2)........   84 bits(1)(2)........   85 bits(1)(2)........   86 bits(1)(2)........   87 bits(1)(2)........   88 bits(1)(2)........   89 bits(1)(2)........   90 bits(1)(2)........   91 bits(1)(2)........   92 bits(1)(2)........   93 bits(1)(2)........   94 bits(1)(2)........   95 bits(1)(2)........   96 bits(1)(2)........   97 bits(1)(2)........   98 bits(1)(2)........   99 bits(1)(2)........  100 bits(1)(2)........  101 bits(1)(2)........  102 bits(1)(2)........  103 bits(1)(2)........  104 bits(1)(2)........  105 bits(1)(2)........  106 bits(1)(2)........  107 bits(1)(2)........  108 bits(1)(2)........  109 bits(1)(2)........  110 bits(1)(2)........  111 bits(1)(2)........  112 bits(1)(2)........  113 bits(1)(2)........  114 bits(1)(2)........  115 bits(1)(2)........  116 bits(1)(2)........  117 bits(1)(2)........  118 bits(1)(2)........  119 bits(1)(2)........  120 bits(1)(2)........  121 bits(1)(2)........  122 bits(1)(2)........  123 bits(1)(2)........  124 bits(1)(2)........  125 bits(1)(2)........  126 bits(1)(2)........  127 bits(1)(2)........  128 bits(1)(2)........

TEST mp_reduce_2k_l



TEST mp_set_double



TEST mp_signed_rsh



TEST mp_sqrt

     0     1     2     3     4     5     6     7     8     9    10    11    12    13    14    15    16    17    18    19    20    21    22    23    24    25    26    27    28    29    30    31    32    33    34    35    36    37    38    39    40    41    42    43    44    45    46    47    48    49    50    51    52    53    54    55    56    57    58    59    60    61    62    63    64    65    66    67    68    69    70    71    72    73    74    75    76    77    78    79    80    81    82    83    84    85    86    87    88    89    90    91    92    93    94    95    96    97    98    99   100   101   102   103   104   105   106   107   108   109   110   111   112   113   114   115   116   117   118   119   120   121   122   123   124   125   126   127   128   129   130   131   132   133   134   135   136   137   138   139   140   141   142   143   144   145   146   147   148   149   150   151   152   153   154   155   156   157   158   159   160   161   162   163   164   165   166   167   168   169   170   171   172   173   174   175   176   177   178   179   180   181   182   183   184   185   186   187   188   189   190   191   192   193   194   195   196   197   198   199   200   201   202   203   204   205   206   207   208   209   210   211   212   213   214   215   216   217   218   219   220   221   222   223   224   225   226   227   228   229   230   231   232   233   234   235   236   237   238   239   240   241   242   243   244   245   246   247   248   249   250   251   252   253   254   255   256   257   258   259   260   261   262   263   264   265   266   267   268   269   270   271   272   273   274   275   276   277   278   279   280   281   282   283   284   285   286   287   288   289   290   291   292   293   294   295   296   297   298   299   300   301   302   303   304   305   306   307   308   309   310   311   312   313   314   315   316   317   318   319   320   321   322   323   324   325   326   327   328   329   330   331   332   333   334   335   336   337   338   339   340   341   342   343   344   345   346   347   348   349   350   351   352   353   354   355   356   357   358   359   360   361   362   363   364   365   366   367   368   369   370   371   372   373   374   375   376   377   378   379   380   381   382   383   384   385   386   387   388   389   390   391   392   393   394   395   396   397   398   399   400   401   402   403   404   405   406   407   408   409   410   411   412   413   414   415   416   417   418   419   420   421   422   423   424   425   426   427   428   429   430   431   432   433   434   435   436   437   438   439   440   441   442   443   444   445   446   447   448   449   450   451   452   453   454   455   456   457   458   459   460   461   462   463   464   465   466   467   468   469   470   471   472   473   474   475   476   477   478   479   480   481   482   483   484   485   486   487   488   489   490   491   492   493   494   495   496   497   498   499   500   501   502   503   504   505   506   507   508   509   510   511   512   513   514   515   516   517   518   519   520   521   522   523   524   525   526   527   528   529   530   531   532   533   534   535   536   537   538   539   540   541   542   543   544   545   546   547   548   549   550   551   552   553   554   555   556   557   558   559   560   561   562   563   564   565   566   567   568   569   570   571   572   573   574   575   576   577   578   579   580   581   582   583   584   585   586   587   588   589   590   591   592   593   594   595   596   597   598   599   600   601   602   603   604   605   606   607   608   609   610   611   612   613   614   615   616   617   618   619   620   621   622   623   624   625   626   627   628   629   630   631   632   633   634   635   636   637   638   639   640   641   642   643   644   645   646   647   648   649   650   651   652   653   654   655   656   657   658   659   660   661   662   663   664   665   666   667   668   669   670   671   672   673   674   675   676   677   678   679   680   681   682   683   684   685   686   687   688   689   690   691   692   693   694   695   696   697   698   699   700   701   702   703   704   705   706   707   708   709   710   711   712   713   714   715   716   717   718   719   720   721   722   723   724   725   726   727   728   729   730   731   732   733   734   735   736   737   738   739   740   741   742   743   744   745   746   747   748   749   750   751   752   753   754   755   756   757   758   759   760   761   762   763   764   765   766   767   768   769   770   771   772   773   774   775   776   777   778   779   780   781   782   783   784   785   786   787   788   789   790   791   792   793   794   795   796   797   798   799   800   801   802   803   804   805   806   807   808   809   810   811   812   813   814   815   816   817   818   819   820   821   822   823   824   825   826   827   828   829   830   831   832   833   834   835   836   837   838   839   840   841   842   843   844   845   846   847   848   849   850   851   852   853   854   855   856   857   858   859   860   861   862   863   864   865   866   867   868   869   870   871   872   873   874   875   876   877   878   879   880   881   882   883   884   885   886   887   888   889   890   891   892   893   894   895   896   897   898   899   900   901   902   903   904   905   906   907   908   909   910   911   912   913   914   915   916   917   918   919   920   921   922   923   924   925   926   927   928   929   930   931   932   933   934   935   936   937   938   939   940   941   942   943   944   945   946   947   948   949   950   951   952   953   954   955   956   957   958   959   960   961   962   963   964   965   966   967   968   969   970   971   972   973   974   975   976   977   978   979   980   981   982   983   984   985   986   987   988   989   990   991   992   993   994   995   996   997   998   999

TEST mp_sqrtmod_prime



TEST mp_xor



TEST s_mp_balance_mul



TEST s_mp_karatsuba_mul



TEST s_mp_karatsuba_sqr



TEST s_mp_toom_mul



TEST s_mp_toom_sqr



Tests OK/NOP/FAIL: 42/0/0
test done
