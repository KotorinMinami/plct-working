t/Email-Address-XS.t ........ 
1..516
ok 1 - use Email::Address::XS;
ok 2 - test method new() without arguments
ok 3 - test method new() without arguments
ok 4 - test method new() without arguments
ok 5 - test method new() without arguments
ok 6 - test method new() without arguments
ok 7 - test method new() without arguments
ok 8 - test method new() without arguments
ok 9 - following test throws warning
ok 10 - test method new() without arguments
ok 11 - test method new() with one argument
ok 12 - test method new() with one argument
ok 13 - test method new() with one argument
ok 14 - test method new() with one argument
ok 15 - test method new() with one argument
ok 16 - test method new() with one argument
ok 17 - test method new() with one argument
ok 18 - following test throws warning
ok 19 - test method new() with one argument
ok 20 - test method new() with two arguments as array
ok 21 - test method new() with two arguments as array
ok 22 - test method new() with two arguments as array
ok 23 - test method new() with two arguments as array
ok 24 - test method new() with two arguments as array
ok 25 - test method new() with two arguments as array
ok 26 - test method new() with two arguments as array
ok 27 - test method new() with two arguments as array
ok 28 - test method new() with two arguments as hash
ok 29 - test method new() with two arguments as hash
ok 30 - test method new() with two arguments as hash
ok 31 - test method new() with two arguments as hash
ok 32 - test method new() with two arguments as hash
ok 33 - test method new() with two arguments as hash
ok 34 - test method new() with two arguments as hash
ok 35 - test method new() with two arguments as hash
ok 36 - test method new() with two arguments as array
ok 37 - test method new() with two arguments as array
ok 38 - test method new() with two arguments as array
ok 39 - test method new() with two arguments as array
ok 40 - test method new() with two arguments as array
ok 41 - test method new() with two arguments as array
ok 42 - test method new() with two arguments as array
ok 43 - test method new() with two arguments as array
ok 44 - test method new() with three arguments
ok 45 - test method new() with three arguments
ok 46 - test method new() with three arguments
ok 47 - test method new() with three arguments
ok 48 - test method new() with three arguments
ok 49 - test method new() with three arguments
ok 50 - test method new() with three arguments
ok 51 - test method new() with three arguments
ok 52 - test method new() with four arguments user & host as hash
ok 53 - test method new() with four arguments user & host as hash
ok 54 - test method new() with four arguments user & host as hash
ok 55 - test method new() with four arguments user & host as hash
ok 56 - test method new() with four arguments user & host as hash
ok 57 - test method new() with four arguments user & host as hash
ok 58 - test method new() with four arguments user & host as hash
ok 59 - test method new() with four arguments user & host as hash
ok 60 - test method new() with four arguments phrase & address as hash
ok 61 - test method new() with four arguments phrase & address as hash
ok 62 - test method new() with four arguments phrase & address as hash
ok 63 - test method new() with four arguments phrase & address as hash
ok 64 - test method new() with four arguments phrase & address as hash
ok 65 - test method new() with four arguments phrase & address as hash
ok 66 - test method new() with four arguments phrase & address as hash
ok 67 - test method new() with four arguments phrase & address as hash
ok 68 - following test throws warning
ok 69 - test method new() with four arguments as array
ok 70 - test method new() with four arguments as array
ok 71 - test method new() with four arguments as array
ok 72 - test method new() with four arguments as array
ok 73 - test method new() with four arguments as array
ok 74 - test method new() with four arguments as array
ok 75 - test method new() with four arguments as array
ok 76 - test method new() with four arguments as array
ok 77 - test method new() with four arguments as hash (phrase is string "address")
ok 78 - test method new() with four arguments as hash (phrase is string "address")
ok 79 - test method new() with four arguments as hash (phrase is string "address")
ok 80 - test method new() with four arguments as hash (phrase is string "address")
ok 81 - test method new() with four arguments as hash (phrase is string "address")
ok 82 - test method new() with four arguments as hash (phrase is string "address")
ok 83 - test method new() with four arguments as hash (phrase is string "address")
ok 84 - test method new() with four arguments as hash (phrase is string "address")
ok 85 - test method new() with copy argument
ok 86 - test method new() with copy argument
ok 87 - test method new() with copy argument
ok 88 - test method new() with copy argument
ok 89 - test method new() with copy argument
ok 90 - test method new() with copy argument
ok 91 - test method new() with copy argument
ok 92 - test method new() with copy argument
ok 93 - test method new() with copy argument
ok 94 - test method new() with copy argument
ok 95 - test method new() with copy argument
ok 96 - test method new() with copy argument
ok 97 - test method new() with copy argument
ok 98 - test method new() with copy argument
ok 99 - test method new() with copy argument
ok 100 - test method new() with copy argument
ok 101 - test method new() with copy argument
ok 102 - test method new() with invalid email address
ok 103 - test method new() with invalid email address
ok 104 - test method new() with invalid email address
ok 105 - test method new() with invalid email address
ok 106 - test method new() with invalid email address
ok 107 - test method new() with invalid email address
ok 108 - test method new() with invalid email address
ok 109 - following test throws warning
ok 110 - test method new() with invalid email address
ok 111 - test method new() with copy argument of invalid email address
ok 112 - test method new() with copy argument of invalid email address
ok 113 - test method new() with empty strings for user and non empty for host and phrase
ok 114 - test method new() with empty strings for user and non empty for host and phrase
ok 115 - test method new() with empty strings for user and non empty for host and phrase
ok 116 - test method new() with empty strings for user and non empty for host and phrase
ok 117 - test method new() with empty strings for user and non empty for host and phrase
ok 118 - test method new() with empty strings for user and non empty for host and phrase
ok 119 - test method new() with empty strings for user and non empty for host and phrase
ok 120 - test method new() with empty strings for user and non empty for host and phrase
ok 121 - test method new() with empty strings for host and non empty for user and phrase
ok 122 - test method new() with empty strings for host and non empty for user and phrase
ok 123 - test method new() with empty strings for host and non empty for user and phrase
ok 124 - test method new() with empty strings for host and non empty for user and phrase
ok 125 - test method new() with empty strings for host and non empty for user and phrase
ok 126 - test method new() with empty strings for host and non empty for user and phrase
ok 127 - test method new() with empty strings for host and non empty for user and phrase
ok 128 - following test throws warning
ok 129 - test method new() with empty strings for host and non empty for user and phrase
ok 130 - test method new() with all named arguments
ok 131 - test method new() with all named arguments
ok 132 - test method new() with all named arguments
ok 133 - test method new() with all named arguments
ok 134 - test method new() with all named arguments
ok 135 - test method new() with all named arguments
ok 136 - test method new() with all named arguments
ok 137 - test method new() with all named arguments
ok 138 - test method new() that address takes precedence over user and host
ok 139 - test method new() that address takes precedence over user and host
ok 140 - test method new() that address takes precedence over user and host
ok 141 - test method new() with UNICODE characters
ok 142 - test method new() with UNICODE characters
ok 143 - test method new() with UNICODE characters
ok 144 - test method new() with UNICODE characters
ok 145 - test method new() with UNICODE characters
ok 146 - test method new() with UNICODE characters
ok 147 - test method new() with UNICODE characters
ok 148 - test method new() with UNICODE characters
ok 149 - test method new() with Latin1 characters
ok 150 - test method new() with Latin1 characters
ok 151 - test method new() with Latin1 characters
ok 152 - test method new() with Latin1 characters
ok 153 - test method new() with Latin1 characters
ok 154 - test method new() with Latin1 characters
ok 155 - test method new() with Latin1 characters
ok 156 - test method new() with Latin1 characters
ok 157 - test method new() with mix of Latin1 and UNICODE characters
ok 158 - test method new() with mix of Latin1 and UNICODE characters
ok 159 - test method new() with mix of Latin1 and UNICODE characters
ok 160 - test method new() with mix of Latin1 and UNICODE characters
ok 161 - test method new() with mix of Latin1 and UNICODE characters
ok 162 - test method new() with mix of Latin1 and UNICODE characters
ok 163 - test method new() with mix of Latin1 and UNICODE characters
ok 164 - test method new() with mix of Latin1 and UNICODE characters
ok 165 - test method phrase()
ok 166 - test method phrase()
ok 167 - test method phrase()
ok 168 - test method phrase()
ok 169 - test method phrase()
ok 170 - test method phrase()
ok 171 - test method phrase()
ok 172 - test method user()
ok 173 - test method user()
ok 174 - test method user()
ok 175 - test method user()
ok 176 - test method user()
ok 177 - test method user()
ok 178 - test method user()
ok 179 - test method host()
ok 180 - test method host()
ok 181 - test method host()
ok 182 - test method host()
ok 183 - test method host()
ok 184 - test method host()
ok 185 - test method host()
ok 186 - test method address()
ok 187 - test method address()
ok 188 - test method address()
ok 189 - test method address()
ok 190 - test method address()
ok 191 - test method address()
ok 192 - test method address()
ok 193 - test method address()
ok 194 - test method address()
ok 195 - test method address()
ok 196 - test method address()
ok 197 - test method address()
ok 198 - test method address()
ok 199 - test method address()
ok 200 - test method address()
ok 201 - test method address()
ok 202 - test method address()
ok 203 - test method address()
ok 204 - test method address()
ok 205 - test method address()
ok 206 - test method comment()
ok 207 - test method comment()
ok 208 - test method comment()
ok 209 - test method comment()
ok 210 - test method comment()
ok 211 - test method comment()
ok 212 - test method comment()
ok 213 - test method comment()
ok 214 - test method comment()
ok 215 - test method comment()
ok 216 - test method comment()
ok 217 - test method comment()
ok 218 - test method comment()
ok 219 - test method comment()
ok 220 - test method comment()
ok 221 - test method comment()
ok 222 - test method comment()
ok 223 - test method comment()
ok 224 - test method comment()
ok 225 - test method comment()
ok 226 - test method comment()
ok 227 - test method comment()
ok 228 - test method comment()
ok 229 - test method comment()
ok 230 - test method comment()
ok 231 - test method comment()
ok 232 - test method comment()
ok 233 - test method comment()
ok 234 - test method comment()
ok 235 - test method comment()
ok 236 - test method comment()
ok 237 - test method comment()
ok 238 - test method comment()
ok 239 - test method name()
ok 240 - test method name()
ok 241 - test method name()
ok 242 - test method name()
ok 243 - test method name()
ok 244 - test method name()
ok 245 - test method name()
ok 246 - test method name()
ok 247 - test method name()
ok 248 - test method name()
ok 249 - test method name()
ok 250 - test method name()
ok 251 - test method name()
ok 252 - test method name()
ok 253 - test object stringify
ok 254 - test object stringify
ok 255 - test object stringify
ok 256 - test object stringify
ok 257 - following test throws warning
ok 258 - test object stringify
ok 259 - test method format()
ok 260 - test method format()
ok 261 - test method format()
ok 262 - test method format()
ok 263 - following test throws warning
ok 264 - test method format()
ok 265 - following test throws warning
ok 266 - test method format()
ok 267 - test method format()
ok 268 - following test throws warning
ok 269 - test method format()
ok 270 - following test throws warning
ok 271 - test method parse() without argument
ok 272 - following test throws warning
ok 273 - test method parse() with undef argument
ok 274 - test method parse() on empty string
ok 275 - test method parse() on invalid not parsable line
ok 276 - test method parse() on invalid not parsable line
ok 277 - test method parse() on invalid not parsable line
ok 278 - test method parse() on string with valid addresses
ok 279 - test method parse() on string with valid addresses
ok 280 - test method parse() on string with valid addresses
ok 281 - test method parse() on string with valid addresses
ok 282 - test method parse() on string with valid addresses
ok 283 - test method parse() on string with valid addresses
ok 284 - test method parse() on string with valid addresses
ok 285 - test method parse() in scalar context on empty string
ok 286 - test method parse() in scalar context on empty string
ok 287 - test method parse() in scalar context on empty string
ok 288 - test method parse() in scalar context on empty string
ok 289 - test method parse() in scalar context with one address
ok 290 - test method parse() in scalar context with one address
ok 291 - test method parse() in scalar context with one address
ok 292 - test method parse() in scalar context with one address
ok 293 - test method parse() in scalar context with more addresses
ok 294 - test method parse() in scalar context with more addresses
ok 295 - test method parse() in scalar context with more addresses
ok 296 - test method parse() in scalar context with more addresses
ok 297 - test method parse() in scalar context with invalid, but parsable angle address
ok 298 - test method parse() in scalar context with invalid, but parsable angle address
ok 299 - test method parse() in scalar context with invalid, but parsable angle address
ok 300 - test method parse() in scalar context with invalid, but parsable angle address
ok 301 - test method parse() in scalar context with invalid, but parsable angle address
ok 302 - test method parse() in scalar context with invalid, but parsable angle address
ok 303 - test method parse() in scalar context with invalid, but parsable bare address
ok 304 - test method parse() in scalar context with invalid, but parsable bare address
ok 305 - test method parse() in scalar context with invalid, but parsable bare address
ok 306 - test method parse() in scalar context with invalid, but parsable bare address
ok 307 - test method parse() in scalar context with invalid, but parsable bare address
ok 308 - test method parse() in scalar context with valid address followed by garbage
ok 309 - test method parse() in scalar context with valid address followed by garbage
ok 310 - test method parse() in scalar context with valid address followed by garbage
ok 311 - test method parse() in scalar context with valid address followed by garbage
ok 312 - test method parse() in scalar context with valid address followed by garbage
ok 313 - following test throws warning
ok 314 - test method parse_bare_address() without argument
ok 315 - test method parse_bare_address() without argument
ok 316 - test method parse_bare_address() without argument
ok 317 - following test throws warning
ok 318 - test method parse_bare_address() with undef argument
ok 319 - test method parse_bare_address() with undef argument
ok 320 - test method parse_bare_address() with undef argument
ok 321 - test method parse_bare_address() on empty string
ok 322 - test method parse_bare_address() on empty string
ok 323 - test method parse_bare_address() on empty string
ok 324 - test method parse_bare_address() on invalid not parsable address
ok 325 - test method parse_bare_address() on invalid not parsable address
ok 326 - test method parse_bare_address() on invalid not parsable address
ok 327 - test method parse_bare_address() on invalid input string - address with angle brackets
ok 328 - test method parse_bare_address() on invalid input string - address with angle brackets
ok 329 - test method parse_bare_address() on invalid input string - address with angle brackets
ok 330 - test method parse_bare_address() on invalid input string - phrase with address
ok 331 - test method parse_bare_address() on invalid input string - phrase with address
ok 332 - test method parse_bare_address() on invalid input string - phrase with address
ok 333 - test method parse_bare_address() on invalid input string - two addresses
ok 334 - test method parse_bare_address() on invalid input string - two addresses
ok 335 - test method parse_bare_address() on invalid input string - two addresses
ok 336 - test method parse_bare_address() on valid input string
ok 337 - test method parse_bare_address() on valid input string
ok 338 - test method parse_bare_address() on valid input string
ok 339 - test method parse_bare_address() on valid input string with comment
ok 340 - test method parse_bare_address() on valid input string with comment
ok 341 - test method parse_bare_address() on valid input string with comment
ok 342 - test method parse_bare_address() on valid input string with comment
ok 343 - test method parse_bare_address() on valid input string with comment
ok 344 - test method parse_bare_address() on valid input string with comment
ok 345 - test method parse_bare_address() on valid input string with comment
ok 346 - test method parse_bare_address() on valid input string with comment
ok 347 - test method parse_bare_address() on valid input string with comment
ok 348 - test method parse_bare_address() on valid input string with comment
ok 349 - test method parse_bare_address() on valid input string with comment
ok 350 - test method parse_bare_address() on valid input string with comment
ok 351 - test method parse_bare_address() on valid input string with two comments
ok 352 - test method parse_bare_address() on valid input string with two comments
ok 353 - test method parse_bare_address() on valid input string with two comments
ok 354 - test method parse_bare_address() on valid input string with two comments
ok 355 - test method parse_bare_address() on valid input string with two comments
ok 356 - test method parse_bare_address() on valid input string with two comments
ok 357 - test method parse_bare_address() on valid input string with lot of comments
ok 358 - test method parse_bare_address() on valid input string with lot of comments
ok 359 - test method parse_bare_address() on valid input string with lot of comments
ok 360 - test function format_email_addresses() with empty list of addresses
ok 361 - following test throws warning
ok 362 - test function format_email_addresses() with invalid string argument
ok 363 - test function format_email_addresses() with derived object class
ok 364 - following test throws warning
ok 365 - test function format_email_addresses() with not derived object class
ok 366 - following test throws warning
ok 367 - test function format_email_addresses() with invalid object class
ok 368 - test function format_email_addresses() with list of different type of addresses
ok 369 - following test throws warning
ok 370 - test function parse_email_addresses() with undef argument
ok 371 - test function parse_email_addresses() on empty string
ok 372 - test function parse_email_addresses() on incorrect string
ok 373 - test function parse_email_addresses() on string with unquoted phrase
ok 374 - test function parse_email_addresses() on string with quoted phrase
ok 375 - test function parse_email_addresses() on string with more words in phrase
ok 376 - test function parse_email_addresses() on string with just address
ok 377 - test function parse_email_addresses() on string with comment after address
ok 378 - test function parse_email_addresses() on string with just address in angle brackets
ok 379 - test function parse_email_addresses() on string with character @ inside group name
ok 380 - test function parse_email_addresses() on string with character @ inside phrase
ok 381 - test function parse_email_addresses() on string with email address inside phrase
ok 382 - test function parse_email_addresses() on string with quoted and escaped mailbox part of address
ok 383 - test function parse_email_addresses() on string with two items
ok 384 - test function parse_email_addresses() on string with three items
ok 385 - test function parse_email_addresses() on string with a lots of comments
ok 386 - test function parse_email_addresses() on string with comma in comment
ok 387 - test function parse_email_addresses() on string with nested comments
ok 388 - test function parse_email_addresses() on string with obsolate white spaces
ok 389 - test function parse_email_addresses() on CVE-2015-7686 string
ok 390 - test function parse_email_addresses() on CVE-2017-14461 string
ok 391 - test function parse_email_addresses() on CVE-2017-14461 string
ok 392 - test function parse_email_addresses() on string with lots of different types of addresses
ok 393 - test function parse_email_addresses() with second derived class name argument
ok 394 - following test throws warning
ok 395 - test function parse_email_addresses() with second not derived class name argument
ok 396 - following test throws warning
ok 397 - test function format_email_groups() with odd number of arguments
ok 398 - following test throws warning
ok 399 - test function format_email_groups() with invalid type second argument (undef)
ok 400 - following test throws warning
ok 401 - test function format_email_groups() with invalid type second argument (string)
ok 402 - test function format_email_groups() with empty list of groups
ok 403 - test function format_email_groups() with empty list of addresses in one undef group
ok 404 - test function format_email_groups() with one email address in undef group
ok 405 - test function format_email_groups() with one email address in nameless group
ok 406 - test function format_email_groups() with empty list of addresses in one named group
ok 407 - test function format_email_groups() with derived object class
ok 408 - following test throws warning
ok 409 - test function format_email_groups() with not derived object class
ok 410 - test function format_email_groups() with two addresses in one named group
ok 411 - test function format_email_groups() with addresses in two groups
ok 412 - test function format_email_groups() that does not quote MIME encoded strings
ok 413 - test function format_email_groups() that preserves unicode characters and UTF-8 status flag
ok 414 - test function format_email_groups() that correctly compose Latin1 string from ASCII and Latin1 parts
ok 415 - test function format_email_groups() that correctly compose Latin1 string from Latin1 parts
ok 416 - test function format_email_groups() that correctly compose UNICODE string from ASCII, Latin1 and UNICODE parts
ok 417 - test function format_email_groups() with different type of addresses in more groups
ok 418 - test function format_email_groups() with magic scalars in ASCII, Latin1 and UNICODE
ok 419 - test function format_email_groups() with magic scalars in UNICODE
ok 420 - test function format_email_groups() with magic scalars in Latin1
ok 421 - test function format_email_groups() with magic scalar which is undef
ok 422 - test function format_email_groups() that called GET magic exacly once
ok 423 - test function format_email_groups() that called GET magic exacly once
ok 424 - test function format_email_groups() that called GET magic exacly once
ok 425 - test function format_email_groups() that called GET magic exacly once
ok 426 - test function format_email_groups() that did not call SET magic
ok 427 - test function format_email_groups() that did not call SET magic
ok 428 - test function format_email_groups() that did not call SET magic
ok 429 - test function format_email_groups() that did not call SET magic
ok 430 - test function format_email_groups() that called GET magic exacly once
ok 431 - test function format_email_groups() that did not call SET magic
ok 432 - test function format_email_groups() that called GET magic exacly once
ok 433 - test function format_email_groups() that called GET magic exacly once
ok 434 - test function format_email_groups() that called GET magic exacly once
ok 435 - test function format_email_groups() that called GET magic exacly once
ok 436 - test function format_email_groups() that did not call SET magic
ok 437 - test function format_email_groups() that did not call SET magic
ok 438 - test function format_email_groups() that did not call SET magic
ok 439 - test function format_email_groups() that did not call SET magic
ok 440 - test function format_email_groups() that called GET magic exacly once
ok 441 - test function format_email_groups() that called GET magic exacly once
ok 442 - test function format_email_groups() that called GET magic exacly once
ok 443 - test function format_email_groups() that called GET magic exacly once
ok 444 - test function format_email_groups() that did not call SET magic
ok 445 - test function format_email_groups() that did not call SET magic
ok 446 - test function format_email_groups() that did not call SET magic
ok 447 - test function format_email_groups() that did not call SET magic
ok 448 - test function format_email_groups() that called GET magic exacly once
ok 449 - test function format_email_groups() that called GET magic exacly once
ok 450 - test function format_email_groups() that called GET magic exacly once
ok 451 - test function format_email_groups() that called GET magic exacly once
ok 452 - test function format_email_groups() that did not call SET magic
ok 453 - test function format_email_groups() that did not call SET magic
ok 454 - test function format_email_groups() that did not call SET magic
ok 455 - test function format_email_groups() that did not call SET magic
ok 456 - test function format_email_groups() that called GET magic exacly once
ok 457 - test function format_email_groups() that called GET magic exacly once
ok 458 - test function format_email_groups() that called GET magic exacly once
ok 459 - test function format_email_groups() that called GET magic exacly once
ok 460 - test function format_email_groups() that did not call SET magic
ok 461 - test function format_email_groups() that did not call SET magic
ok 462 - test function format_email_groups() that did not call SET magic
ok 463 - test function format_email_groups() that did not call SET magic
ok 464 - test function format_email_groups() that called GET magic exacly once
ok 465 - test function format_email_groups() that called GET magic exacly once
ok 466 - test function format_email_groups() that called GET magic exacly once
ok 467 - test function format_email_groups() that called GET magic exacly once
ok 468 - test function format_email_groups() that did not call SET magic
ok 469 - test function format_email_groups() that did not call SET magic
ok 470 - test function format_email_groups() that did not call SET magic
ok 471 - test function format_email_groups() that did not call SET magic
ok 472 - test function format_email_groups() that called GET magic exacly once
ok 473 - test function format_email_groups() that called GET magic exacly once
ok 474 - test function format_email_groups() that called GET magic exacly once
ok 475 - test function format_email_groups() that called GET magic exacly once
ok 476 - test function format_email_groups() that did not call SET magic
ok 477 - test function format_email_groups() that did not call SET magic
ok 478 - test function format_email_groups() that did not call SET magic
ok 479 - test function format_email_groups() that did not call SET magic
ok 480 - following test throws warning
ok 481 - test function parse_email_groups() with undef argument
ok 482 - test function parse_email_groups() on empty string
ok 483 - test function parse_email_groups() on incorrect string
ok 484 - test function parse_email_groups() with second derived class name argument
ok 485 - following test throws warning
ok 486 - test function parse_email_groups() with second not derived class name argument
ok 487 - test function parse_email_groups() on MIME string with encoded colons and semicolons
ok 488 - test function parse_email_groups() that preserve unicode characters and UTF-8 status flag
ok 489 - test function parse_email_groups() on string with nested comments and quoted characters
ok 490 - test function parse_email_groups() on string with nul character
ok 491 - test function parse_email_groups() on string which begins with nul character
ok 492 - test function parse_email_groups() on string which ends with nul character
ok 493 - test function parse_email_groups() on string with TAB characters
ok 494 - test function format_email_groups() with nul character in phrase
ok 495 - test function format_email_groups() with nul character in phrase
ok 496 - test function format_email_groups() with nul character in user part of address
ok 497 - test function format_email_groups() with nul character in user part of address
ok 498 - following test throws warning
ok 499 - test function format_email_groups() with nul character in host part of address
ok 500 - following test throws warning
ok 501 - test function format_email_groups() with nul character in host part of address
ok 502 - test function format_email_groups() with nul character in comment
ok 503 - test function format_email_groups() with nul character in comment
ok 504 - test function format_email_groups() with lot of non-qtext characters in user part of address
ok 505 - test function parse_email_groups() with magic scalar
ok 506 - test function parse_email_groups() that called GET magic exacly once
ok 507 - test function parse_email_groups() that did not call SET magic
ok 508 - test method is_obj() on undef
ok 509 - test method is_obj() on string
ok 510 - test method is_obj() on undef variable
ok 511 - test method is_obj() on string variable
ok 512 - test method is_obj() on string reference
ok 513 - test method is_obj() on Email::Address::XS object
ok 514 - test method is_obj() on reference of Email::Address::XS object
ok 515 - test method is_obj() on Email::Address::XS derived object
ok 516 - test method is_obj() on Email::Address::XS not derived object
ok
t/taint-Email-Address-XS.t .. 
1..137
ok 1 - use Email::Address::XS;
ok 2 - no tainted arguments
ok 3 - no tainted arguments
ok 4 - no tainted arguments
ok 5 - no tainted arguments
ok 6 - no tainted arguments
ok 7 - no tainted arguments
ok 8 - no tainted arguments
ok 9 - no tainted arguments
ok 10 - no tainted arguments
ok 11 - no tainted arguments
ok 12 - no tainted arguments
ok 13 - no tainted arguments
ok 14 - no tainted arguments
ok 15 - no tainted arguments
ok 16 - tainted phrase argument
ok 17 - tainted phrase argument
ok 18 - tainted phrase argument
ok 19 - tainted phrase argument
ok 20 - tainted phrase argument
ok 21 - tainted phrase argument
ok 22 - tainted phrase argument
ok 23 - tainted phrase argument
ok 24 - tainted phrase argument
ok 25 - tainted phrase argument
ok 26 - tainted phrase argument
ok 27 - tainted phrase argument
ok 28 - tainted phrase argument
ok 29 - tainted phrase argument
ok 30 - tainted user argument
ok 31 - tainted user argument
ok 32 - tainted user argument
ok 33 - tainted user argument
ok 34 - tainted user argument
ok 35 - tainted user argument
ok 36 - tainted user argument
ok 37 - tainted user argument
ok 38 - tainted user argument
ok 39 - tainted user argument
ok 40 - tainted user argument
ok 41 - tainted user argument
ok 42 - tainted user argument
ok 43 - tainted user argument
ok 44 - tainted host argument
ok 45 - tainted host argument
ok 46 - tainted host argument
ok 47 - tainted host argument
ok 48 - tainted host argument
ok 49 - tainted host argument
ok 50 - tainted host argument
ok 51 - tainted host argument
ok 52 - tainted host argument
ok 53 - tainted host argument
ok 54 - tainted host argument
ok 55 - tainted host argument
ok 56 - tainted host argument
ok 57 - tainted host argument
ok 58 - tainted address argument
ok 59 - tainted address argument
ok 60 - tainted address argument
ok 61 - tainted address argument
ok 62 - tainted address argument
ok 63 - tainted address argument
ok 64 - tainted address argument
ok 65 - tainted address argument
ok 66 - tainted address argument
ok 67 - tainted address argument
ok 68 - tainted address argument
ok 69 - tainted address argument
ok 70 - tainted address argument
ok 71 - tainted address argument
ok 72 - tainted address argument
ok 73 - tainted address argument
ok 74 - tainted address argument
ok 75 - tainted address argument
ok 76 - tainted address argument
ok 77 - tainted address argument
ok 78 - tainted address argument
ok 79 - tainted address argument
ok 80 - tainted address argument
ok 81 - tainted address argument
ok 82 - tainted address argument
ok 83 - tainted address argument
ok 84 - tainted address argument
ok 85 - tainted address argument
ok 86 - no tainted parse
ok 87 - no tainted parse
ok 88 - no tainted parse
ok 89 - no tainted parse
ok 90 - no tainted parse
ok 91 - no tainted parse
ok 92 - no tainted parse
ok 93 - no tainted parse
ok 94 - no tainted parse
ok 95 - no tainted parse
ok 96 - no tainted parse
ok 97 - no tainted parse
ok 98 - no tainted parse
ok 99 - no tainted parse
ok 100 - no tainted parse
ok 101 - no tainted parse
ok 102 - tainted parse
ok 103 - tainted parse
ok 104 - tainted parse
ok 105 - tainted parse
ok 106 - tainted parse
ok 107 - tainted parse
ok 108 - tainted parse
ok 109 - tainted parse
ok 110 - tainted parse
ok 111 - tainted parse
ok 112 - tainted parse
ok 113 - tainted parse
ok 114 - tainted parse
ok 115 - tainted parse
ok 116 - tainted parse
ok 117 - tainted parse
ok 118 - no tainted parse_bare_address
ok 119 - no tainted parse_bare_address
ok 120 - no tainted parse_bare_address
ok 121 - no tainted parse_bare_address
ok 122 - no tainted parse_bare_address
ok 123 - no tainted parse_bare_address
ok 124 - no tainted parse_bare_address
ok 125 - no tainted parse_bare_address
ok 126 - no tainted parse_bare_address
ok 127 - no tainted parse_bare_address
ok 128 - tainted parse_bare_address
ok 129 - tainted parse_bare_address
ok 130 - tainted parse_bare_address
ok 131 - tainted parse_bare_address
ok 132 - tainted parse_bare_address
ok 133 - tainted parse_bare_address
ok 134 - tainted parse_bare_address
ok 135 - tainted parse_bare_address
ok 136 - tainted parse_bare_address
ok 137 - tainted parse_bare_address
ok
All tests successful.
Files=2, Tests=653,  3 wallclock secs ( 0.69 usr  0.11 sys +  2.13 cusr  0.63 csys =  3.56 CPU)
Result: PASS
